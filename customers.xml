<pdfxml Title="Optimization Tips" Producer="Skia/PDF m92 Google Docs Renderer">
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="1" rotate="0" page_index="0" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextLineHorizontal y0="676.562" y1="696.562" x0="72.0" x1="240.883" width="168.883" height="20.0" bbox="[72.0, 676.562, 240.883, 696.562]" word_margin="0.1"><LTTextBoxHorizontal y0="676.562" y1="696.562" x0="72.0" x1="240.883" width="168.883" height="20.0" bbox="[72.0, 676.562, 240.883, 696.562]" index="0">About File Formats </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="623.859" y1="664.859" x0="72.0" x1="537.571" width="465.571" height="41.0" bbox="[72.0, 623.859, 537.571, 664.859]" index="1"><LTTextLineHorizontal y0="653.859" y1="664.859" x0="72.0" x1="516.034" width="444.034" height="11.0" bbox="[72.0, 653.859, 516.034, 664.859]" word_margin="0.1">DO NOT copy and paste from PDF files into your code or input files! PDF files contain <LTLine y0="654.5" y1="654.5" x0="72.0" x1="427.0" width="355.0" height="0.0" bbox="[72.0, 654.5, 427.0, 654.5]" linewidth="0" pts="[[72.0, 654.5], [427.0, 654.5]]"/></LTTextLineHorizontal><LTTextLineHorizontal y0="638.859" y1="649.859" x0="72.0" x1="537.571" width="465.571" height="11.0" bbox="[72.0, 638.859, 537.571, 649.859]" word_margin="0.1">hidden characters that will make your output incorrect. All of our projects provide sample output </LTTextLineHorizontal><LTTextLineHorizontal y0="623.859" y1="634.859" x0="72.0" x1="260.796" width="188.796" height="11.0" bbox="[72.0, 623.859, 260.796, 634.859]" word_margin="0.1">in text files, copy and paste from there. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="548.359" y1="604.859" x0="72.0" x1="538.601" width="466.601" height="56.5" bbox="[72.0, 548.359, 538.601, 604.859]" index="2"><LTTextLineHorizontal y0="593.859" y1="604.859" x0="72.0" x1="536.118" width="464.118" height="11.0" bbox="[72.0, 593.859, 536.118, 604.859]" word_margin="0.1">Unfortunately, since DOS was created by Microsoft (long before Windows), they have formatted </LTTextLineHorizontal><LTTextLineHorizontal y0="578.859" y1="589.859" x0="72.0" x1="538.601" width="466.601" height="11.0" bbox="[72.0, 578.859, 538.601, 589.859]" word_margin="0.1">their text files differently from everyone else, adding an extra character to mark the end of a line. </LTTextLineHorizontal><LTTextLineHorizontal y0="563.859" y1="574.859" x0="72.0" x1="531.443" width="459.443" height="11.0" bbox="[72.0, 563.859, 531.443, 574.859]" word_margin="0.1">What this means for you is that you must use files that are formatted correctly for the operating </LTTextLineHorizontal><LTTextLineHorizontal y0="548.359" y1="559.859" x0="72.0" x1="265.348" width="193.348" height="11.5" bbox="[72.0, 548.359, 265.348, 559.859]" word_margin="0.1">system you're on if you use getline(). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="518.859" y1="529.859" x0="72.0" x1="307.481" width="235.481" height="11.0" bbox="[72.0, 518.859, 307.481, 529.859]" word_margin="0.1"><LTTextBoxHorizontal y0="518.859" y1="529.859" x0="72.0" x1="307.481" width="235.481" height="11.0" bbox="[72.0, 518.859, 307.481, 529.859]" index="3">If you're on a Mac, everything just works for you. </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="458.859" y1="499.859" x0="72.0" x1="512.212" width="440.212" height="41.0" bbox="[72.0, 458.859, 512.212, 499.859]" index="4"><LTTextLineHorizontal y0="488.859" y1="499.859" x0="72.0" x1="509.978" width="437.978" height="11.0" bbox="[72.0, 488.859, 509.978, 499.859]" word_margin="0.1">If you're using Windows and Visual Studio, make sure that you have Visual Studio 2017 or </LTTextLineHorizontal><LTTextLineHorizontal y0="473.859" y1="484.859" x0="72.0" x1="512.212" width="440.212" height="11.0" bbox="[72.0, 473.859, 512.212, 484.859]" word_margin="0.1">newer, and that it's fully patched. These versions seem to be able to read input files in any </LTTextLineHorizontal><LTTextLineHorizontal y0="458.859" y1="469.859" x0="72.0" x1="470.013" width="398.013" height="11.0" bbox="[72.0, 458.859, 470.013, 469.859]" word_margin="0.1">format (Windows or Unix newline characters), and you shouldn't have any trouble. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="413.312" y1="433.312" x0="72.0" x1="230.564" width="158.564" height="20.0" bbox="[72.0, 413.312, 230.564, 433.312]" word_margin="0.1"><LTTextBoxHorizontal y0="413.312" y1="433.312" x0="72.0" x1="230.564" width="158.564" height="20.0" bbox="[72.0, 413.312, 230.564, 433.312]" index="5">About Data Types </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="375.609" y1="401.609" x0="72.0" x1="519.555" width="447.555" height="26.0" bbox="[72.0, 375.609, 519.555, 401.609]" index="6"><LTTextLineHorizontal y0="390.109" y1="401.609" x0="72.0" x1="519.555" width="447.555" height="11.5" bbox="[72.0, 390.109, 519.555, 401.609]" word_margin="0.1">We will refer to simple types such as int, double, bool, size_t, etc. as primitive, or built-in </LTTextLineHorizontal><LTTextLineHorizontal y0="375.609" y1="386.609" x0="72.0" x1="324.935" width="252.935" height="11.0" bbox="[72.0, 375.609, 324.935, 386.609]" word_margin="0.1">types. A pointer to any type is itself a primitive type. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="330.062" y1="350.062" x0="72.0" x1="260.866" width="188.866" height="20.0" bbox="[72.0, 330.062, 260.866, 350.062]" word_margin="0.1"><LTTextBoxHorizontal y0="330.062" y1="350.062" x0="72.0" x1="260.866" width="188.866" height="20.0" bbox="[72.0, 330.062, 260.866, 350.062]" index="7">Memory Optimization </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="293.843" y1="307.843" x0="72.0" x1="216.654" width="144.654" height="14.0" bbox="[72.0, 293.843, 216.654, 307.843]" word_margin="0.1"><LTTextBoxHorizontal y0="293.843" y1="307.843" x0="72.0" x1="216.654" width="144.654" height="14.0" bbox="[72.0, 293.843, 216.654, 307.843]" index="8">Classes and Structures </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="244.359" y1="285.359" x0="72.0" x1="520.473" width="448.473" height="41.0" bbox="[72.0, 244.359, 520.473, 285.359]" index="9"><LTTextLineHorizontal y0="274.359" y1="285.359" x0="72.0" x1="520.473" width="448.473" height="11.0" bbox="[72.0, 274.359, 520.473, 285.359]" word_margin="0.1">For a single variable, or a few variables inside a function, don&#8217;t worry about how big it is, use </LTTextLineHorizontal><LTTextLineHorizontal y0="259.359" y1="270.359" x0="72.0" x1="519.657" width="447.657" height="11.0" bbox="[72.0, 259.359, 519.657, 270.359]" word_margin="0.1">what makes sense. Worry about them when you make an entire data structure of them, and </LTTextLineHorizontal><LTTextLineHorizontal y0="244.359" y1="255.359" x0="72.0" x1="299.913" width="227.913" height="11.0" bbox="[72.0, 244.359, 299.913, 255.359]" word_margin="0.1">might have to read 100,000 of them from a file. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="138.859" y1="225.359" x0="72.0" x1="533.332" width="461.332" height="86.5" bbox="[72.0, 138.859, 533.332, 225.359]" index="10"><LTTextLineHorizontal y0="214.359" y1="225.359" x0="72.0" x1="525.908" width="453.908" height="11.0" bbox="[72.0, 214.359, 525.908, 225.359]" word_margin="0.1">When creating a class or structure, create member variables in order from largest to smallest. </LTTextLineHorizontal><LTTextLineHorizontal y0="199.359" y1="210.359" x0="72.0" x1="532.07" width="460.07" height="11.0" bbox="[72.0, 199.359, 532.07, 210.359]" word_margin="0.1">For example: objects (usually bigger than a single variable) should come first, followed in order </LTTextLineHorizontal><LTTextLineHorizontal y0="183.859" y1="195.359" x0="72.0" x1="527.131" width="455.131" height="11.5" bbox="[72.0, 183.859, 527.131, 195.359]" word_margin="0.1">by double (8 bytes), long long (8 bytes), int and float (4 bytes), short integers (2 bytes), </LTTextLineHorizontal><LTTextLineHorizontal y0="168.859" y1="180.359" x0="72.0" x1="533.332" width="461.332" height="11.5" bbox="[72.0, 168.859, 533.332, 180.359]" word_margin="0.1">char (1 byte), bool (1 byte). This is because a variable must start at a memory address that is </LTTextLineHorizontal><LTTextLineHorizontal y0="153.859" y1="165.359" x0="72.0" x1="521.104" width="449.104" height="11.5" bbox="[72.0, 153.859, 521.104, 165.359]" word_margin="0.1">a multiple of its size. Think about what happens if your structure has an int, then a double, </LTTextLineHorizontal><LTTextLineHorizontal y0="138.859" y1="150.359" x0="72.0" x1="432.265" width="360.265" height="11.5" bbox="[72.0, 138.859, 432.265, 150.359]" word_margin="0.1">then a bool&#8230; There ends up being gaps of wasted space between them. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="79.359" y1="120.359" x0="72.0" x1="529.816" width="457.816" height="41.0" bbox="[72.0, 79.359, 529.816, 120.359]" index="11"><LTTextLineHorizontal y0="108.859" y1="120.359" x0="72.0" x1="514.761" width="442.761" height="11.5" bbox="[72.0, 108.859, 514.761, 120.359]" word_margin="0.1">If you have to use dynamic memory, always write new and delete in pairs. As soon as you </LTTextLineHorizontal><LTTextLineHorizontal y0="93.859" y1="105.359" x0="72.0" x1="506.437" width="434.437" height="11.5" bbox="[72.0, 93.859, 506.437, 105.359]" word_margin="0.1">write a new, write the corresponding delete immediately so that you don&#8217;t forget and leak </LTTextLineHorizontal><LTTextLineHorizontal y0="79.359" y1="90.359" x0="72.0" x1="529.816" width="457.816" height="11.0" bbox="[72.0, 79.359, 529.816, 90.359]" word_margin="0.1">memory. Use data structures to your advantage: it&#8217;s better to have a class or structure with 15 </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="12">1 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="2" rotate="0" page_index="1" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="617.109" y1="718.109" x0="72.0" x1="539.427" width="467.427" height="101.0" bbox="[72.0, 617.109, 539.427, 718.109]" index="0"><LTTextLineHorizontal y0="707.109" y1="718.109" x0="72.0" x1="539.427" width="467.427" height="11.0" bbox="[72.0, 707.109, 539.427, 718.109]" word_margin="0.1">variables inside of it, and create a vector of objects, than to have 15 vectors. NEVER use global </LTTextLineHorizontal><LTTextLineHorizontal y0="692.109" y1="703.109" x0="72.0" x1="539.39" width="467.39" height="11.0" bbox="[72.0, 692.109, 539.39, 703.109]" word_margin="0.1">variables! They seem harmless enough in a 100 line program, but in a real system (which might </LTTextLineHorizontal><LTTextLineHorizontal y0="677.109" y1="688.109" x0="72.0" x1="523.366" width="451.366" height="11.0" bbox="[72.0, 677.109, 523.366, 688.109]" word_margin="0.1">have over half a million lines of code), how do you find the one line of code that&#8217;s modifying a </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="501.952" width="429.952" height="11.0" bbox="[72.0, 662.109, 501.952, 673.109]" word_margin="0.1">global variable incorrectly, when someone forgot to create a local variable? Using global </LTTextLineHorizontal><LTTextLineHorizontal y0="647.109" y1="658.109" x0="72.0" x1="524.759" width="452.759" height="11.0" bbox="[72.0, 647.109, 524.759, 658.109]" word_margin="0.1">variables is a crutch that can come back and haunt you later, especially during job interviews. </LTTextLineHorizontal><LTTextLineHorizontal y0="632.109" y1="643.109" x0="72.0" x1="519.872" width="447.872" height="11.0" bbox="[72.0, 632.109, 519.872, 643.109]" word_margin="0.1">Whenever you find yourself thinking &#8220;I could just use a global variable&#8221;, instead think &#8220;I could </LTTextLineHorizontal><LTTextLineHorizontal y0="617.109" y1="628.109" x0="72.0" x1="470.947" width="398.947" height="11.0" bbox="[72.0, 617.109, 470.947, 628.109]" word_margin="0.1">create a class, add member variables, and make my functions member functions&#8221;. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="497.109" y1="598.109" x0="72.0" x1="536.999" width="464.999" height="101.0" bbox="[72.0, 497.109, 536.999, 598.109]" index="1"><LTTextLineHorizontal y0="587.109" y1="598.109" x0="72.0" x1="530.896" width="458.896" height="11.0" bbox="[72.0, 587.109, 530.896, 598.109]" word_margin="0.1">Although you should definitely put objects first inside of a data structure, don&#8217;t confuse the size </LTTextLineHorizontal><LTTextLineHorizontal y0="571.609" y1="583.109" x0="72.0" x1="536.999" width="464.999" height="11.5" bbox="[72.0, 571.609, 536.999, 583.109]" word_margin="0.1">of a vector with the sizeof(vector&lt;int&gt;). The sizeof() operator (yes it looks like a function </LTTextLineHorizontal><LTTextLineHorizontal y0="557.109" y1="568.109" x0="72.0" x1="491.546" width="419.546" height="11.0" bbox="[72.0, 557.109, 491.546, 568.109]" word_margin="0.1">but it&#8217;s actually an operator) gives you how much memory is occupied by that type, but </LTTextLineHorizontal><LTTextLineHorizontal y0="542.109" y1="553.109" x0="72.0" x1="530.869" width="458.869" height="11.0" bbox="[72.0, 542.109, 530.869, 553.109]" word_margin="0.1">something like a vector or a string could have more memory allocated on the heap. Using g++ </LTTextLineHorizontal><LTTextLineHorizontal y0="526.609" y1="538.109" x0="72.0" x1="517.891" width="445.891" height="11.5" bbox="[72.0, 526.609, 517.891, 538.109]" word_margin="0.1">6.2.0, the sizeof() a vector is always 24 bytes, but that&#8217;s just the member variables (which </LTTextLineHorizontal><LTTextLineHorizontal y0="512.109" y1="523.109" x0="72.0" x1="507.06" width="435.06" height="11.0" bbox="[72.0, 512.109, 507.06, 523.109]" word_margin="0.1">includes a pointer to a block of memory on the heap, but not the amount of memory being </LTTextLineHorizontal><LTTextLineHorizontal y0="497.109" y1="508.109" x0="72.0" x1="127.001" width="55.001" height="11.0" bbox="[72.0, 497.109, 127.001, 508.109]" word_margin="0.1">pointed to). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="452.109" y1="478.109" x0="72.0" x1="535.789" width="463.789" height="26.0" bbox="[72.0, 452.109, 535.789, 478.109]" index="2"><LTTextLineHorizontal y0="467.109" y1="478.109" x0="72.0" x1="535.789" width="463.789" height="11.0" bbox="[72.0, 467.109, 535.789, 478.109]" word_margin="0.1">When choosing what type of variable to use, think about the possible range of values that might </LTTextLineHorizontal><LTTextLineHorizontal y0="452.109" y1="463.109" x0="72.0" x1="120.887" width="48.887" height="11.0" bbox="[72.0, 452.109, 120.887, 463.109]" word_margin="0.1">be stored. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="377.109" y1="433.109" x0="72.0" x1="525.239" width="453.239" height="56.0" bbox="[72.0, 377.109, 525.239, 433.109]" index="3"><LTTextLineHorizontal y0="421.609" y1="433.109" x0="72.0" x1="525.239" width="453.239" height="11.5" bbox="[72.0, 421.609, 525.239, 433.109]" word_margin="0.1">A long double (in g++) can store approximately 18 decimal digits of precision, a double can </LTTextLineHorizontal><LTTextLineHorizontal y0="406.609" y1="418.109" x0="72.0" x1="507.906" width="435.906" height="11.5" bbox="[72.0, 406.609, 507.906, 418.109]" word_margin="0.1">store approximately 15 digits, a float can store approximately 7. For the extra 3 digits of </LTTextLineHorizontal><LTTextLineHorizontal y0="392.109" y1="403.109" x0="72.0" x1="511.922" width="439.922" height="11.0" bbox="[72.0, 392.109, 511.922, 403.109]" word_margin="0.1">precision, a long double isn&#8217;t really worth double the memory cost unless you&#8217;re doing very </LTTextLineHorizontal><LTTextLineHorizontal y0="377.109" y1="388.109" x0="72.0" x1="221.69" width="149.69" height="11.0" bbox="[72.0, 377.109, 221.69, 388.109]" word_margin="0.1">exacting scientific calculations. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="271.609" y1="358.109" x0="72.0" x1="537.304" width="465.304" height="86.5" bbox="[72.0, 271.609, 537.304, 358.109]" index="4"><LTTextLineHorizontal y0="346.609" y1="358.109" x0="72.0" x1="535.984" width="463.984" height="11.5" bbox="[72.0, 346.609, 535.984, 358.109]" word_margin="0.1">The size_t type should be used whenever you&#8217;re referring to the size of a container (such as a </LTTextLineHorizontal><LTTextLineHorizontal y0="331.609" y1="343.109" x0="72.0" x1="537.304" width="465.304" height="11.5" bbox="[72.0, 331.609, 537.304, 343.109]" word_margin="0.1">vector or deque). The number of bytes and the range of values may be different depending on </LTTextLineHorizontal><LTTextLineHorizontal y0="317.109" y1="328.109" x0="72.0" x1="515.167" width="443.167" height="11.0" bbox="[72.0, 317.109, 515.167, 328.109]" word_margin="0.1">the compiler or compiler settings. To avoid issues of types being different sizes for different </LTTextLineHorizontal><LTTextLineHorizontal y0="301.609" y1="313.109" x0="72.0" x1="531.398" width="459.398" height="11.5" bbox="[72.0, 301.609, 531.398, 313.109]" word_margin="0.1">compilers or compiler settings, consider using types in &lt;cstdint&gt;. If you want to be sure that </LTTextLineHorizontal><LTTextLineHorizontal y0="287.109" y1="298.109" x0="72.0" x1="527.01" width="455.01" height="11.0" bbox="[72.0, 287.109, 527.01, 298.109]" word_margin="0.1">you&#8217;re creating an integer variable of a particular size, C++11 introduced some standard sized </LTTextLineHorizontal><LTTextLineHorizontal y0="271.609" y1="283.109" x0="72.0" x1="249.219" width="177.219" height="11.5" bbox="[72.0, 271.609, 249.219, 283.109]" word_margin="0.1">integer types, defined in &lt;cstdint&gt;: </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="236.109" y1="247.109" x0="77.25" x1="102.094" width="24.844" height="11.0" bbox="[77.25, 236.109, 102.094, 247.109]" word_margin="0.1"><LTTextBoxHorizontal y0="236.109" y1="247.109" x0="77.25" x1="102.094" width="24.844" height="11.0" bbox="[77.25, 236.109, 102.094, 247.109]" index="5">Type </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="236.109" y1="247.109" x0="184.5" x1="310.269" width="125.769" height="11.0" bbox="[184.5, 236.109, 310.269, 247.109]" word_margin="0.1"><LTTextBoxHorizontal y0="236.109" y1="247.109" x0="184.5" x1="310.269" width="125.769" height="11.0" bbox="[184.5, 236.109, 310.269, 247.109]" index="6">Bytes Minimum Value </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="236.109" y1="247.109" x0="384.0" x1="466.478" width="82.478" height="11.0" bbox="[384.0, 236.109, 466.478, 247.109]" word_margin="0.1"><LTTextBoxHorizontal y0="236.109" y1="247.109" x0="384.0" x1="466.478" width="82.478" height="11.0" bbox="[384.0, 236.109, 466.478, 247.109]" index="7">Maximum Value </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="210.859" y1="221.859" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 210.859, 125.603, 221.859]" word_margin="0.1"><LTTextBoxHorizontal y0="210.859" y1="221.859" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 210.859, 125.603, 221.859]" index="8">uint64_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="186.109" y1="197.109" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 186.109, 119.559, 197.109]" word_margin="0.1"><LTTextBoxHorizontal y0="186.109" y1="197.109" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 186.109, 119.559, 197.109]" index="9">int64_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="161.359" y1="172.359" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 161.359, 125.603, 172.359]" word_margin="0.1"><LTTextBoxHorizontal y0="161.359" y1="172.359" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 161.359, 125.603, 172.359]" index="10">uint32_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="136.609" y1="147.609" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 136.609, 119.559, 147.609]" word_margin="0.1"><LTTextBoxHorizontal y0="136.609" y1="147.609" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 136.609, 119.559, 147.609]" index="11">int32_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="111.859" y1="122.859" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 111.859, 125.603, 122.859]" word_margin="0.1"><LTTextBoxHorizontal y0="111.859" y1="122.859" x0="77.25" x1="125.603" width="48.353" height="11.0" bbox="[77.25, 111.859, 125.603, 122.859]" index="12">uint16_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="87.109" y1="98.109" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 87.109, 119.559, 98.109]" word_margin="0.1"><LTTextBoxHorizontal y0="87.109" y1="98.109" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 87.109, 119.559, 98.109]" index="13">int16_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="210.859" y1="221.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 210.859, 190.548, 221.859]" word_margin="0.1"><LTTextBoxHorizontal y0="210.859" y1="221.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 210.859, 190.548, 221.859]" index="14">8 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="186.109" y1="197.109" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 186.109, 190.548, 197.109]" word_margin="0.1"><LTTextBoxHorizontal y0="186.109" y1="197.109" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 186.109, 190.548, 197.109]" index="15">8 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="161.359" y1="172.359" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 161.359, 190.548, 172.359]" word_margin="0.1"><LTTextBoxHorizontal y0="161.359" y1="172.359" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 161.359, 190.548, 172.359]" index="16">4 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="136.609" y1="147.609" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 136.609, 190.548, 147.609]" word_margin="0.1"><LTTextBoxHorizontal y0="136.609" y1="147.609" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 136.609, 190.548, 147.609]" index="17">4 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="111.859" y1="122.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 111.859, 190.548, 122.859]" word_margin="0.1"><LTTextBoxHorizontal y0="111.859" y1="122.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 111.859, 190.548, 122.859]" index="18">2 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="87.109" y1="98.109" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 87.109, 190.548, 98.109]" word_margin="0.1"><LTTextBoxHorizontal y0="87.109" y1="98.109" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 87.109, 190.548, 98.109]" index="19">2 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="211.359" y1="222.359" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 211.359, 236.368, 222.359]" word_margin="0.1"><LTTextBoxHorizontal y0="211.359" y1="222.359" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 211.359, 236.368, 222.359]" index="20">0 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="211.359" y1="222.359" x0="384.0" x1="524.595" width="140.595" height="11.0" bbox="[384.0, 211.359, 524.595, 222.359]" word_margin="0.1"><LTTextBoxHorizontal y0="211.359" y1="222.359" x0="384.0" x1="524.595" width="140.595" height="11.0" bbox="[384.0, 211.359, 524.595, 222.359]" index="21">18,446,744,073,709,551,615 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="186.609" y1="197.609" x0="230.25" x1="368.392" width="138.142" height="11.0" bbox="[230.25, 186.609, 368.392, 197.609]" word_margin="0.1"><LTTextBoxHorizontal y0="186.609" y1="197.609" x0="230.25" x1="368.392" width="138.142" height="11.0" bbox="[230.25, 186.609, 368.392, 197.609]" index="22">-9,223,372,036,854,775,808 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="186.609" y1="197.609" x0="384.0" x1="518.482" width="134.482" height="11.0" bbox="[384.0, 186.609, 518.482, 197.609]" word_margin="0.1"><LTTextBoxHorizontal y0="186.609" y1="197.609" x0="384.0" x1="518.482" width="134.482" height="11.0" bbox="[384.0, 186.609, 518.482, 197.609]" index="23">9,223,372,036,854,775,807 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="161.859" y1="172.859" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 161.859, 236.368, 172.859]" word_margin="0.1"><LTTextBoxHorizontal y0="161.859" y1="172.859" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 161.859, 236.368, 172.859]" index="24">0 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="161.859" y1="172.859" x0="384.0" x1="454.3" width="70.3" height="11.0" bbox="[384.0, 161.859, 454.3, 172.859]" word_margin="0.1"><LTTextBoxHorizontal y0="161.859" y1="172.859" x0="384.0" x1="454.3" width="70.3" height="11.0" bbox="[384.0, 161.859, 454.3, 172.859]" index="25">4,294,967,295 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="137.109" y1="148.109" x0="230.25" x1="304.21" width="73.96" height="11.0" bbox="[230.25, 137.109, 304.21, 148.109]" word_margin="0.1"><LTTextBoxHorizontal y0="137.109" y1="148.109" x0="230.25" x1="304.21" width="73.96" height="11.0" bbox="[230.25, 137.109, 304.21, 148.109]" index="26">-2,147,483,648 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="137.109" y1="148.109" x0="384.0" x1="454.3" width="70.3" height="11.0" bbox="[384.0, 137.109, 454.3, 148.109]" word_margin="0.1"><LTTextBoxHorizontal y0="137.109" y1="148.109" x0="384.0" x1="454.3" width="70.3" height="11.0" bbox="[384.0, 137.109, 454.3, 148.109]" index="27">2,147,483,647 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="112.359" y1="123.359" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 112.359, 236.368, 123.359]" word_margin="0.1"><LTTextBoxHorizontal y0="112.359" y1="123.359" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 112.359, 236.368, 123.359]" index="28">0 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="87.609" y1="98.609" x0="230.25" x1="267.535" width="37.285" height="11.0" bbox="[230.25, 87.609, 267.535, 98.609]" word_margin="0.1"><LTTextBoxHorizontal y0="87.609" y1="98.609" x0="230.25" x1="267.535" width="37.285" height="11.0" bbox="[230.25, 87.609, 267.535, 98.609]" index="29">-32,768 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="112.359" y1="123.359" x0="384.0" x1="417.625" width="33.625" height="11.0" bbox="[384.0, 112.359, 417.625, 123.359]" word_margin="0.1"><LTTextBoxHorizontal y0="112.359" y1="123.359" x0="384.0" x1="417.625" width="33.625" height="11.0" bbox="[384.0, 112.359, 417.625, 123.359]" index="30">65,535 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="87.609" y1="98.609" x0="384.0" x1="417.625" width="33.625" height="11.0" bbox="[384.0, 87.609, 417.625, 98.609]" word_margin="0.1"><LTTextBoxHorizontal y0="87.609" y1="98.609" x0="384.0" x1="417.625" width="33.625" height="11.0" bbox="[384.0, 87.609, 417.625, 98.609]" index="31">32,767 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="32">2 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTLine y0="81.0" y1="255.0" x0="72.5" x1="72.5" width="0.0" height="174.0" bbox="[72.5, 81.0, 72.5, 255.0]" linewidth="0" pts="[[72.5, 255.0], [72.5, 81.0]]"/>
      <LTLine y0="81.0" y1="255.0" x0="179.5" x1="179.5" width="0.0" height="174.0" bbox="[179.5, 81.0, 179.5, 255.0]" linewidth="0" pts="[[179.5, 255.0], [179.5, 81.0]]"/>
      <LTLine y0="81.0" y1="255.0" x0="225.5" x1="225.5" width="0.0" height="174.0" bbox="[225.5, 81.0, 225.5, 255.0]" linewidth="0" pts="[[225.5, 255.0], [225.5, 81.0]]"/>
      <LTLine y0="81.0" y1="255.0" x0="378.5" x1="378.5" width="0.0" height="174.0" bbox="[378.5, 81.0, 378.5, 255.0]" linewidth="0" pts="[[378.5, 255.0], [378.5, 81.0]]"/>
      <LTLine y0="81.0" y1="255.0" x0="540.5" x1="540.5" width="0.0" height="174.0" bbox="[540.5, 81.0, 540.5, 255.0]" linewidth="0" pts="[[540.5, 255.0], [540.5, 81.0]]"/>
      <LTLine y0="254.5" y1="254.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 254.5, 540.0, 254.5]" linewidth="0" pts="[[72.0, 254.5], [540.0, 254.5]]"/>
      <LTLine y0="230.5" y1="230.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 230.5, 540.0, 230.5]" linewidth="0" pts="[[72.0, 230.5], [540.0, 230.5]]"/>
      <LTLine y0="205.5" y1="205.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 205.5, 540.0, 205.5]" linewidth="0" pts="[[72.0, 205.5], [540.0, 205.5]]"/>
      <LTLine y0="180.5" y1="180.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 180.5, 540.0, 180.5]" linewidth="0" pts="[[72.0, 180.5], [540.0, 180.5]]"/>
      <LTLine y0="155.5" y1="155.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 155.5, 540.0, 155.5]" linewidth="0" pts="[[72.0, 155.5], [540.0, 155.5]]"/>
      <LTLine y0="131.5" y1="131.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 131.5, 540.0, 131.5]" linewidth="0" pts="[[72.0, 131.5], [540.0, 131.5]]"/>
      <LTLine y0="106.5" y1="106.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 106.5, 540.0, 106.5]" linewidth="0" pts="[[72.0, 106.5], [540.0, 106.5]]"/>
      <LTLine y0="81.5" y1="81.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 81.5, 540.0, 81.5]" linewidth="0" pts="[[72.0, 81.5], [540.0, 81.5]]"/>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="3" rotate="0" page_index="2" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextLineHorizontal y0="700.609" y1="711.609" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 700.609, 119.559, 711.609]" word_margin="0.1"><LTTextBoxHorizontal y0="700.609" y1="711.609" x0="77.25" x1="119.559" width="42.309" height="11.0" bbox="[77.25, 700.609, 119.559, 711.609]" index="0">uint8_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="675.859" y1="686.859" x0="77.25" x1="113.516" width="36.266" height="11.0" bbox="[77.25, 675.859, 113.516, 686.859]" word_margin="0.1"><LTTextBoxHorizontal y0="675.859" y1="686.859" x0="77.25" x1="113.516" width="36.266" height="11.0" bbox="[77.25, 675.859, 113.516, 686.859]" index="1">int8_t </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="700.609" y1="711.609" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 700.609, 190.548, 711.609]" word_margin="0.1"><LTTextBoxHorizontal y0="700.609" y1="711.609" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 700.609, 190.548, 711.609]" index="2">1 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="675.859" y1="686.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 675.859, 190.548, 686.859]" word_margin="0.1"><LTTextBoxHorizontal y0="675.859" y1="686.859" x0="184.5" x1="190.548" width="6.048" height="11.0" bbox="[184.5, 675.859, 190.548, 686.859]" index="3">1 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="701.109" y1="712.109" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 701.109, 236.368, 712.109]" word_margin="0.1"><LTTextBoxHorizontal y0="701.109" y1="712.109" x0="230.25" x1="236.368" width="6.118" height="11.0" bbox="[230.25, 701.109, 236.368, 712.109]" index="4">0 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="676.359" y1="687.359" x0="230.25" x1="252.255" width="22.005" height="11.0" bbox="[230.25, 676.359, 252.255, 687.359]" word_margin="0.1"><LTTextBoxHorizontal y0="676.359" y1="687.359" x0="230.25" x1="252.255" width="22.005" height="11.0" bbox="[230.25, 676.359, 252.255, 687.359]" index="5">-128 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="701.109" y1="712.109" x0="384.0" x1="402.344" width="18.344" height="11.0" bbox="[384.0, 701.109, 402.344, 712.109]" word_margin="0.1"><LTTextBoxHorizontal y0="701.109" y1="712.109" x0="384.0" x1="402.344" width="18.344" height="11.0" bbox="[384.0, 701.109, 402.344, 712.109]" index="6">255 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="676.359" y1="687.359" x0="384.0" x1="402.344" width="18.344" height="11.0" bbox="[384.0, 676.359, 402.344, 687.359]" word_margin="0.1"><LTTextBoxHorizontal y0="676.359" y1="687.359" x0="384.0" x1="402.344" width="18.344" height="11.0" bbox="[384.0, 676.359, 402.344, 687.359]" index="7">127 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="621.707" y1="636.343" x0="72.0" x1="320.386" width="248.386" height="14.636" bbox="[72.0, 621.707, 320.386, 636.343]" word_margin="0.1"><LTTextBoxHorizontal y0="621.707" y1="636.343" x0="72.0" x1="320.386" width="248.386" height="14.636" bbox="[72.0, 621.707, 320.386, 636.343]" index="8">Return Status and The exit() Function </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="587.859" y1="613.859" x0="72.0" x1="506.393" width="434.393" height="26.0" bbox="[72.0, 587.859, 506.393, 613.859]" index="9"><LTTextLineHorizontal y0="602.859" y1="613.859" x0="72.0" x1="506.393" width="434.393" height="11.0" bbox="[72.0, 602.859, 506.393, 613.859]" word_margin="0.1">If your program &#8220;succeeds&#8221;, it should have a return status of 0, if an error occurs that your </LTTextLineHorizontal><LTTextLineHorizontal y0="587.859" y1="598.859" x0="72.0" x1="498.497" width="426.497" height="11.0" bbox="[72.0, 587.859, 498.497, 598.859]" word_margin="0.1">program cannot handle (such as completely invalid input), the return status should be 1. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="422.859" y1="568.859" x0="72.0" x1="539.894" width="467.894" height="146.0" bbox="[72.0, 422.859, 539.894, 568.859]" index="10"><LTTextLineHorizontal y0="557.359" y1="568.859" x0="72.0" x1="537.782" width="465.782" height="11.5" bbox="[72.0, 557.359, 537.782, 568.859]" word_margin="0.1">Do not call exit() unless there is no other way to terminate from an error condition (such as an </LTTextLineHorizontal><LTTextLineHorizontal y0="542.359" y1="553.859" x0="72.0" x1="504.164" width="432.164" height="11.5" bbox="[72.0, 542.359, 504.164, 553.859]" word_margin="0.1">invalid command line). The reason for this is that when you call exit(), normal program </LTTextLineHorizontal><LTTextLineHorizontal y0="527.859" y1="538.859" x0="72.0" x1="508.276" width="436.276" height="11.0" bbox="[72.0, 527.859, 508.276, 538.859]" word_margin="0.1">shutdown does not happen! Object destructors do not run, dynamic memory does not get </LTTextLineHorizontal><LTTextLineHorizontal y0="512.859" y1="523.859" x0="72.0" x1="496.035" width="424.035" height="11.0" bbox="[72.0, 512.859, 496.035, 523.859]" word_margin="0.1">deleted, and this can lead to lost points on memory checking. If your program is exiting </LTTextLineHorizontal><LTTextLineHorizontal y0="497.859" y1="508.859" x0="72.0" x1="520.505" width="448.505" height="11.0" bbox="[72.0, 497.859, 520.505, 508.859]" word_margin="0.1">because the input (either command line or input file) is invalid and cannot be processed, you </LTTextLineHorizontal><LTTextLineHorizontal y0="482.359" y1="493.859" x0="72.0" x1="533.955" width="461.955" height="11.5" bbox="[72.0, 482.359, 533.955, 493.859]" word_margin="0.1">should exit(1) or return 1 from main(). For any input that you can process, main() should </LTTextLineHorizontal><LTTextLineHorizontal y0="467.359" y1="478.859" x0="72.0" x1="537.056" width="465.056" height="11.5" bbox="[72.0, 467.359, 537.056, 478.859]" word_margin="0.1">return 0. The autograder uses these return values! For any &#8220;invalid&#8221; test case the autograder </LTTextLineHorizontal><LTTextLineHorizontal y0="452.359" y1="463.859" x0="72.0" x1="539.894" width="467.894" height="11.5" bbox="[72.0, 452.359, 539.894, 463.859]" word_margin="0.1">will ignore your program&#8217;s output, and expect the exit status to be 1. The valgrind program will </LTTextLineHorizontal><LTTextLineHorizontal y0="437.859" y1="448.859" x0="72.0" x1="529.678" width="457.678" height="11.0" bbox="[72.0, 437.859, 529.678, 448.859]" word_margin="0.1">consider a test where you have an exit status of 1 to be invalid, and the autograder will not run </LTTextLineHorizontal><LTTextLineHorizontal y0="422.859" y1="433.859" x0="72.0" x1="141.659" width="69.659" height="11.0" bbox="[72.0, 422.859, 141.659, 433.859]" word_margin="0.1">leak checking. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="347.359" y1="403.859" x0="72.0" x1="524.686" width="452.686" height="56.5" bbox="[72.0, 347.359, 524.686, 403.859]" index="11"><LTTextLineHorizontal y0="392.359" y1="403.859" x0="72.0" x1="524.609" width="452.609" height="11.5" bbox="[72.0, 392.359, 524.609, 403.859]" word_margin="0.1">Before you call exit(1), make sure to display a meaningful error message to cerr (the error </LTTextLineHorizontal><LTTextLineHorizontal y0="377.859" y1="388.859" x0="72.0" x1="503.915" width="431.915" height="11.0" bbox="[72.0, 377.859, 503.915, 388.859]" word_margin="0.1">output stream). If you don't, you're left wondering why the program ended without saying </LTTextLineHorizontal><LTTextLineHorizontal y0="362.859" y1="373.859" x0="72.0" x1="524.686" width="452.686" height="11.0" bbox="[72.0, 362.859, 524.686, 373.859]" word_margin="0.1">anything, and the faculty and staff can't help you when we look at the autograder output. The </LTTextLineHorizontal><LTTextLineHorizontal y0="347.359" y1="358.859" x0="72.0" x1="489.667" width="417.667" height="11.5" bbox="[72.0, 347.359, 489.667, 358.859]" word_margin="0.1">cerr stream is never graded by the autograder, but it is kept in a file that we can view. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="313.343" y1="327.343" x0="72.0" x1="160.665" width="88.665" height="14.0" bbox="[72.0, 313.343, 160.665, 327.343]" word_margin="0.1"><LTTextBoxHorizontal y0="313.343" y1="327.343" x0="72.0" x1="160.665" width="88.665" height="14.0" bbox="[72.0, 313.343, 160.665, 327.343]" index="12">Using valgrind </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="203.859" y1="304.859" x0="72.0" x1="538.04" width="466.04" height="101.0" bbox="[72.0, 203.859, 538.04, 304.859]" index="13"><LTTextLineHorizontal y0="293.359" y1="304.859" x0="72.0" x1="519.963" width="447.963" height="11.5" bbox="[72.0, 293.359, 519.963, 304.859]" word_margin="0.1">Do not just use valgrind to check for segmentation faults. It can tell you about uninitialized </LTTextLineHorizontal><LTTextLineHorizontal y0="278.859" y1="289.859" x0="72.0" x1="536.975" width="464.975" height="11.0" bbox="[72.0, 278.859, 536.975, 289.859]" word_margin="0.1">variables, memory leaks, and other issues. Make sure that you build in debugging mode (either </LTTextLineHorizontal><LTTextLineHorizontal y0="263.359" y1="274.859" x0="72.0" x1="538.04" width="466.04" height="11.5" bbox="[72.0, 263.359, 538.04, 274.859]" word_margin="0.1">using -g3 when compiling by hand, or make debug with our supplied Makefile) so that you see </LTTextLineHorizontal><LTTextLineHorizontal y0="248.859" y1="259.859" x0="72.0" x1="525.963" width="453.963" height="11.0" bbox="[72.0, 248.859, 525.963, 259.859]" word_margin="0.1">line numbers in your code where errors occur. Make sure you do this on CAEN, because any </LTTextLineHorizontal><LTTextLineHorizontal y0="233.359" y1="244.859" x0="72.0" x1="536.435" width="464.435" height="11.5" bbox="[72.0, 233.359, 536.435, 244.859]" word_margin="0.1">issues that valgrind sees might cause you to lose points on the programming projects. Check </LTTextLineHorizontal><LTTextLineHorizontal y0="218.859" y1="229.859" x0="72.0" x1="533.338" width="461.338" height="11.0" bbox="[72.0, 218.859, 533.338, 229.859]" word_margin="0.1">the autograder FAQ page for reasons why the autograder might report that leak checking could </LTTextLineHorizontal><LTTextLineHorizontal y0="203.859" y1="214.859" x0="72.0" x1="124.559" width="52.559" height="11.0" bbox="[72.0, 203.859, 124.559, 214.859]" word_margin="0.1">not be run. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="173.859" y1="184.859" x0="72.0" x1="516.418" width="444.418" height="11.0" bbox="[72.0, 173.859, 516.418, 184.859]" word_margin="0.1"><LTTextBoxHorizontal y0="173.859" y1="184.859" x0="72.0" x1="516.418" width="444.418" height="11.0" bbox="[72.0, 173.859, 516.418, 184.859]" index="14">Run your program with valgrind, even if you think it's working correctly! Something like this: </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="128.359" y1="154.359" x0="108.0" x1="331.616" width="223.616" height="26.0" bbox="[108.0, 128.359, 331.616, 154.359]" index="15"><LTTextLineHorizontal y0="143.359" y1="154.359" x0="108.0" x1="168.44" width="60.44" height="11.0" bbox="[108.0, 143.359, 168.44, 154.359]" word_margin="0.1">make debug </LTTextLineHorizontal><LTTextLineHorizontal y0="128.359" y1="139.359" x0="108.0" x1="331.616" width="223.616" height="11.0" bbox="[108.0, 128.359, 331.616, 139.359]" word_margin="0.1">valgrind ./program -flags &lt; input.txt </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="83.859" y1="109.859" x0="72.0" x1="506.593" width="434.593" height="26.0" bbox="[72.0, 83.859, 506.593, 109.859]" index="16"><LTTextLineHorizontal y0="98.859" y1="109.859" x0="72.0" x1="506.593" width="434.593" height="11.0" bbox="[72.0, 98.859, 506.593, 109.859]" word_margin="0.1">Watch for error messages, and the call stack that follows the error message. Look for the </LTTextLineHorizontal><LTTextLineHorizontal y0="83.859" y1="94.859" x0="72.0" x1="403.813" width="331.813" height="11.0" bbox="[72.0, 83.859, 403.813, 94.859]" word_margin="0.1">highest numbered line of code that is yours, and debug the problem. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="17">3 </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTLine y0="670.0" y1="720.0" x0="72.5" x1="72.5" width="0.0" height="50.0" bbox="[72.5, 670.0, 72.5, 720.0]" linewidth="0" pts="[[72.5, 720.0], [72.5, 670.0]]"/>
      <LTLine y0="670.0" y1="720.0" x0="179.5" x1="179.5" width="0.0" height="50.0" bbox="[179.5, 670.0, 179.5, 720.0]" linewidth="0" pts="[[179.5, 720.0], [179.5, 670.0]]"/>
      <LTLine y0="670.0" y1="720.0" x0="225.5" x1="225.5" width="0.0" height="50.0" bbox="[225.5, 670.0, 225.5, 720.0]" linewidth="0" pts="[[225.5, 720.0], [225.5, 670.0]]"/>
      <LTLine y0="670.0" y1="720.0" x0="378.5" x1="378.5" width="0.0" height="50.0" bbox="[378.5, 670.0, 378.5, 720.0]" linewidth="0" pts="[[378.5, 720.0], [378.5, 670.0]]"/>
      <LTLine y0="670.0" y1="720.0" x0="540.5" x1="540.5" width="0.0" height="50.0" bbox="[540.5, 670.0, 540.5, 720.0]" linewidth="0" pts="[[540.5, 720.0], [540.5, 670.0]]"/>
      <LTLine y0="719.5" y1="719.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 719.5, 540.0, 719.5]" linewidth="0" pts="[[72.0, 719.5], [540.0, 719.5]]"/>
      <LTLine y0="695.5" y1="695.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 695.5, 540.0, 695.5]" linewidth="0" pts="[[72.0, 695.5], [540.0, 695.5]]"/>
      <LTLine y0="670.5" y1="670.5" x0="72.0" x1="540.0" width="468.0" height="0.0" bbox="[72.0, 670.5, 540.0, 670.5]" linewidth="0" pts="[[72.0, 670.5], [540.0, 670.5]]"/>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="4" rotate="0" page_index="3" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextLineHorizontal y0="687.593" y1="701.593" x0="72.0" x1="198.015" width="126.015" height="14.0" bbox="[72.0, 687.593, 198.015, 701.593]" word_margin="0.1"><LTTextBoxHorizontal y0="687.593" y1="701.593" x0="72.0" x1="198.015" width="126.015" height="14.0" bbox="[72.0, 687.593, 198.015, 701.593]" index="0">Vectors and Deques </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="592.609" y1="679.109" x0="72.0" x1="536.612" width="464.612" height="86.5" bbox="[72.0, 592.609, 536.612, 679.109]" index="1"><LTTextLineHorizontal y0="667.609" y1="679.109" x0="72.0" x1="536.612" width="464.612" height="11.5" bbox="[72.0, 667.609, 536.612, 679.109]" word_margin="0.1">When creating a vector or deque, if possible create it with the correct size. This actually saves </LTTextLineHorizontal><LTTextLineHorizontal y0="652.609" y1="664.109" x0="72.0" x1="521.508" width="449.508" height="11.5" bbox="[72.0, 652.609, 521.508, 664.109]" word_margin="0.1">both time and memory. When you grow a vector via .push_back(), it doubles in size each </LTTextLineHorizontal><LTTextLineHorizontal y0="638.109" y1="649.109" x0="72.0" x1="529.643" width="457.643" height="11.0" bbox="[72.0, 638.109, 529.643, 649.109]" word_margin="0.1">time it gets full, for instance growing from 1024 to 2048. However, if you knew in advance that </LTTextLineHorizontal><LTTextLineHorizontal y0="622.609" y1="634.109" x0="72.0" x1="520.092" width="448.092" height="11.5" bbox="[72.0, 622.609, 520.092, 634.109]" word_margin="0.1">you were going to have 1200 items to store in it, forgetting to size the vector would result in </LTTextLineHorizontal><LTTextLineHorizontal y0="608.109" y1="619.109" x0="72.0" x1="525.78" width="453.78" height="11.0" bbox="[72.0, 608.109, 525.78, 619.109]" word_margin="0.1">848 extra locations (2048 - 1200), or 71% more space than necessary. For instance, you can </LTTextLineHorizontal><LTTextLineHorizontal y0="592.609" y1="604.109" x0="72.0" x1="243.895" width="171.895" height="11.5" bbox="[72.0, 592.609, 243.895, 604.109]" word_margin="0.1">create a vector of the correct size: </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="502.609" y1="573.609" x0="96.174" x1="470.879" width="374.705" height="71.0" bbox="[96.174, 502.609, 470.879, 573.609]" index="2"><LTTextLineHorizontal y0="562.609" y1="573.609" x0="96.174" x1="132.44" width="36.266" height="11.0" bbox="[96.174, 562.609, 132.44, 573.609]" word_margin="0.1">int n; </LTTextLineHorizontal><LTTextLineHorizontal y0="547.609" y1="558.609" x0="96.174" x1="150.571" width="54.396" height="11.0" bbox="[96.174, 547.609, 150.571, 558.609]" word_margin="0.1">cin &gt;&gt; n; </LTTextLineHorizontal><LTTextLineHorizontal y0="532.609" y1="543.609" x0="96.174" x1="217.05" width="120.875" height="11.0" bbox="[96.174, 532.609, 217.05, 543.609]" word_margin="0.1">vector&lt;int&gt; data(n); </LTTextLineHorizontal><LTTextLineHorizontal y0="517.609" y1="528.609" x0="96.174" x1="470.879" width="374.705" height="11.0" bbox="[96.174, 517.609, 470.879, 528.609]" word_margin="0.1">// Or vector&lt;int&gt; data(n, 0) to explicitly show that all items </LTTextLineHorizontal><LTTextLineHorizontal y0="502.609" y1="513.609" x0="96.174" x1="386.269" width="290.095" height="11.0" bbox="[96.174, 502.609, 386.269, 513.609]" word_margin="0.1">// are initialized to 0, the two are equivalent. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="472.609" y1="484.109" x0="72.0" x1="400.931" width="328.931" height="11.5" bbox="[72.0, 472.609, 400.931, 484.109]" word_margin="0.1"><LTTextBoxHorizontal y0="472.609" y1="484.109" x0="72.0" x1="400.931" width="328.931" height="11.5" bbox="[72.0, 472.609, 400.931, 484.109]" index="3">Alternatively you can create the vector up front, then resize it later: </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="397.609" y1="453.609" x0="96.174" x1="198.919" width="102.745" height="56.0" bbox="[96.174, 397.609, 198.919, 453.609]" index="4"><LTTextLineHorizontal y0="442.609" y1="453.609" x0="96.174" x1="198.919" width="102.745" height="11.0" bbox="[96.174, 442.609, 198.919, 453.609]" word_margin="0.1">vector&lt;int&gt; data; </LTTextLineHorizontal><LTTextLineHorizontal y0="427.609" y1="438.609" x0="96.174" x1="132.44" width="36.266" height="11.0" bbox="[96.174, 427.609, 132.44, 438.609]" word_margin="0.1">int n; </LTTextLineHorizontal><LTTextLineHorizontal y0="412.609" y1="423.609" x0="96.174" x1="150.571" width="54.396" height="11.0" bbox="[96.174, 412.609, 150.571, 423.609]" word_margin="0.1">cin &gt;&gt; n; </LTTextLineHorizontal><LTTextLineHorizontal y0="397.609" y1="408.609" x0="96.174" x1="186.832" width="90.658" height="11.0" bbox="[96.174, 397.609, 186.832, 408.609]" word_margin="0.1">data.resize(n); </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="337.609" y1="379.109" x0="72.0" x1="531.841" width="459.841" height="41.5" bbox="[72.0, 337.609, 531.841, 379.109]" index="5"><LTTextLineHorizontal y0="367.609" y1="379.109" x0="72.0" x1="526.331" width="454.331" height="11.5" bbox="[72.0, 367.609, 526.331, 379.109]" word_margin="0.1">If you use either of these methods, the vector is now of size n. To put items into the vector, </LTTextLineHorizontal><LTTextLineHorizontal y0="352.609" y1="364.109" x0="72.0" x1="531.841" width="459.841" height="11.5" bbox="[72.0, 352.609, 531.841, 364.109]" word_margin="0.1">use a for loop with subscripts, putting them in data[i]. If you start using .push_back(), you </LTTextLineHorizontal><LTTextLineHorizontal y0="337.609" y1="349.109" x0="72.0" x1="345.916" width="273.916" height="11.5" bbox="[72.0, 337.609, 345.916, 349.109]" word_margin="0.1">will grow it to 2 * n, with the first n elements all being 0! </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="292.609" y1="318.609" x0="96.174" x1="259.355" width="163.18" height="26.0" bbox="[96.174, 292.609, 259.355, 318.609]" index="6"><LTTextLineHorizontal y0="307.609" y1="318.609" x0="96.174" x1="192.875" width="96.701" height="11.0" bbox="[96.174, 307.609, 192.875, 318.609]" word_margin="0.1">// Read the data </LTTextLineHorizontal><LTTextLineHorizontal y0="292.609" y1="303.609" x0="96.174" x1="259.355" width="163.18" height="11.0" bbox="[96.174, 292.609, 259.355, 303.609]" word_margin="0.1">for (int i = 0; i &lt; n; ++i) </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="277.609" y1="288.609" x0="120.348" x1="211.006" width="90.658" height="11.0" bbox="[120.348, 277.609, 211.006, 288.609]" word_margin="0.1"><LTTextBoxHorizontal y0="277.609" y1="288.609" x0="120.348" x1="211.006" width="90.658" height="11.0" bbox="[120.348, 277.609, 211.006, 288.609]" index="7">cin &gt;&gt; data[i]; </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="233.109" y1="259.109" x0="72.0" x1="509.877" width="437.877" height="26.0" bbox="[72.0, 233.109, 509.877, 259.109]" index="8"><LTTextLineHorizontal y0="247.609" y1="259.109" x0="72.0" x1="509.877" width="437.877" height="11.5" bbox="[72.0, 247.609, 509.877, 259.109]" word_margin="0.1">If you want to use .push_back(), use .reserve() instead of resize. You will also need a </LTTextLineHorizontal><LTTextLineHorizontal y0="233.109" y1="244.109" x0="72.0" x1="434.331" width="362.331" height="11.0" bbox="[72.0, 233.109, 434.331, 244.109]" word_margin="0.1">temporary variable to read each item into, before pushing it into the vector: </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="157.609" y1="213.609" x0="96.174" x1="198.919" width="102.745" height="56.0" bbox="[96.174, 157.609, 198.919, 213.609]" index="9"><LTTextLineHorizontal y0="202.609" y1="213.609" x0="96.174" x1="198.919" width="102.745" height="11.0" bbox="[96.174, 202.609, 198.919, 213.609]" word_margin="0.1">vector&lt;int&gt; data; </LTTextLineHorizontal><LTTextLineHorizontal y0="187.609" y1="198.609" x0="96.174" x1="168.701" width="72.527" height="11.0" bbox="[96.174, 187.609, 168.701, 198.609]" word_margin="0.1">int n, temp; </LTTextLineHorizontal><LTTextLineHorizontal y0="172.609" y1="183.609" x0="96.174" x1="150.571" width="54.396" height="11.0" bbox="[96.174, 172.609, 150.571, 183.609]" word_margin="0.1">cin &gt;&gt; n; </LTTextLineHorizontal><LTTextLineHorizontal y0="157.609" y1="168.609" x0="96.174" x1="192.875" width="96.701" height="11.0" bbox="[96.174, 157.609, 192.875, 168.609]" word_margin="0.1">data.reserve(n); </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="112.609" y1="138.609" x0="96.174" x1="271.442" width="175.267" height="26.0" bbox="[96.174, 112.609, 271.442, 138.609]" index="10"><LTTextLineHorizontal y0="127.609" y1="138.609" x0="96.174" x1="192.875" width="96.701" height="11.0" bbox="[96.174, 127.609, 192.875, 138.609]" word_margin="0.1">// Read the data </LTTextLineHorizontal><LTTextLineHorizontal y0="112.609" y1="123.609" x0="96.174" x1="271.442" width="175.267" height="11.0" bbox="[96.174, 112.609, 271.442, 123.609]" word_margin="0.1">for (int i = 0; i &lt; n; ++i) { </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="82.609" y1="108.609" x0="120.348" x1="247.267" width="126.919" height="26.0" bbox="[120.348, 82.609, 247.267, 108.609]" index="11"><LTTextLineHorizontal y0="97.609" y1="108.609" x0="120.348" x1="192.875" width="72.527" height="11.0" bbox="[120.348, 97.609, 192.875, 108.609]" word_margin="0.1">cin &gt;&gt; temp; </LTTextLineHorizontal><LTTextLineHorizontal y0="82.609" y1="93.609" x0="120.348" x1="247.267" width="126.919" height="11.0" bbox="[120.348, 82.609, 247.267, 93.609]" word_margin="0.1">data.push_back(temp); </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="12">4 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="5" rotate="0" page_index="4" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextLineHorizontal y0="706.609" y1="717.609" x0="96.174" x1="144.527" width="48.353" height="11.0" bbox="[96.174, 706.609, 144.527, 717.609]" word_margin="0.1"><LTTextBoxHorizontal y0="706.609" y1="717.609" x0="96.174" x1="144.527" width="48.353" height="11.0" bbox="[96.174, 706.609, 144.527, 717.609]" index="0">} // for </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="587.109" y1="688.109" x0="72.0" x1="527.117" width="455.117" height="101.0" bbox="[72.0, 587.109, 527.117, 688.109]" index="1"><LTTextLineHorizontal y0="676.609" y1="688.109" x0="72.0" x1="518.449" width="446.449" height="11.5" bbox="[72.0, 676.609, 518.449, 688.109]" word_margin="0.1">Think of a vector as having two sizes: the number of items currently in the vector, and the </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="520.451" width="448.451" height="11.0" bbox="[72.0, 662.109, 520.451, 673.109]" word_margin="0.1">capacity: the maximum number of elements that it can hold before it has to resize (this is the </LTTextLineHorizontal><LTTextLineHorizontal y0="646.609" y1="658.109" x0="72.0" x1="524.536" width="452.536" height="11.5" bbox="[72.0, 646.609, 524.536, 658.109]" word_margin="0.1">size of the dynamic memory allocated by new, inside the member functions). The .resize() </LTTextLineHorizontal><LTTextLineHorizontal y0="631.609" y1="643.109" x0="72.0" x1="527.117" width="455.117" height="11.5" bbox="[72.0, 631.609, 527.117, 643.109]" word_margin="0.1">member function changes both the capacity and the current size numbers, while .reserve() </LTTextLineHorizontal><LTTextLineHorizontal y0="616.609" y1="628.109" x0="72.0" x1="509.921" width="437.921" height="11.5" bbox="[72.0, 616.609, 509.921, 628.109]" word_margin="0.1">changes the capacity. When you use .resize() and the container increases in size, new </LTTextLineHorizontal><LTTextLineHorizontal y0="601.609" y1="613.109" x0="72.0" x1="524.959" width="452.959" height="11.5" bbox="[72.0, 601.609, 524.959, 613.109]" word_margin="0.1">elements are initialized: objects get their default constructor run (for example, string objects </LTTextLineHorizontal><LTTextLineHorizontal y0="587.109" y1="598.109" x0="72.0" x1="441.019" width="369.019" height="11.0" bbox="[72.0, 587.109, 441.019, 598.109]" word_margin="0.1">would be set to the empty string), while all primitive types are initialized to 0. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="556.609" y1="568.109" x0="72.0" x1="510.944" width="438.944" height="11.5" bbox="[72.0, 556.609, 510.944, 568.109]" word_margin="0.1"><LTTextBoxHorizontal y0="556.609" y1="568.109" x0="72.0" x1="510.944" width="438.944" height="11.5" bbox="[72.0, 556.609, 510.944, 568.109]" index="2">The deque data structure does not have a .reserve() member function, only .resize(). </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="467.109" y1="538.109" x0="72.0" x1="528.937" width="456.937" height="71.0" bbox="[72.0, 467.109, 528.937, 538.109]" index="3"><LTTextLineHorizontal y0="526.609" y1="538.109" x0="72.0" x1="495.958" width="423.958" height="11.5" bbox="[72.0, 526.609, 495.958, 538.109]" word_margin="0.1">When you need data, put it together in one class (or struct) if it needs to be together, </LTTextLineHorizontal><LTTextLineHorizontal y0="512.109" y1="523.109" x0="72.0" x1="527.817" width="455.817" height="11.0" bbox="[72.0, 512.109, 527.817, 523.109]" word_margin="0.1">otherwise separate it. For example, Project 1 needs information about the data you read from </LTTextLineHorizontal><LTTextLineHorizontal y0="497.109" y1="508.109" x0="72.0" x1="521.133" width="449.133" height="11.0" bbox="[72.0, 497.109, 521.133, 508.109]" word_margin="0.1">the file, but the deque needs information about the &#8220;next&#8221; location to be searched. Make two </LTTextLineHorizontal><LTTextLineHorizontal y0="481.609" y1="493.109" x0="72.0" x1="528.937" width="456.937" height="11.5" bbox="[72.0, 481.609, 528.937, 493.109]" word_margin="0.1">separate data structures (one for inside the vector, one for inside the deque), rather than one </LTTextLineHorizontal><LTTextLineHorizontal y0="467.109" y1="478.109" x0="72.0" x1="276.093" width="204.093" height="11.0" bbox="[72.0, 467.109, 276.093, 478.109]" word_margin="0.1">large data structure contained within both. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="421.562" y1="441.562" x0="72.0" x1="246.477" width="174.477" height="20.0" bbox="[72.0, 421.562, 246.477, 441.562]" word_margin="0.1"><LTTextBoxHorizontal y0="421.562" y1="441.562" x0="72.0" x1="246.477" width="174.477" height="20.0" bbox="[72.0, 421.562, 246.477, 441.562]" index="4">Speed Optimization </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="385.343" y1="399.343" x0="72.0" x1="173.135" width="101.135" height="14.0" bbox="[72.0, 385.343, 173.135, 399.343]" word_margin="0.1"><LTTextBoxHorizontal y0="385.343" y1="399.343" x0="72.0" x1="173.135" width="101.135" height="14.0" bbox="[72.0, 385.343, 173.135, 399.343]" index="5">Speeding up I/O </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="365.359" y1="376.859" x0="72.0" x1="418.047" width="346.047" height="11.5" bbox="[72.0, 365.359, 418.047, 376.859]" word_margin="0.1"><LTTextBoxHorizontal y0="365.359" y1="376.859" x0="72.0" x1="418.047" width="346.047" height="11.5" bbox="[72.0, 365.359, 418.047, 376.859]" index="6">As the very first line of main(), before any other code, do the following: </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="350.359" y1="361.359" x0="108.0" x1="337.659" width="229.659" height="11.0" bbox="[108.0, 350.359, 337.659, 361.359]" word_margin="0.1"><LTTextBoxHorizontal y0="350.359" y1="361.359" x0="108.0" x1="337.659" width="229.659" height="11.0" bbox="[108.0, 350.359, 337.659, 361.359]" index="7">std::ios_base::sync_with_stdio(false); </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="245.859" y1="331.859" x0="72.0" x1="536.982" width="464.982" height="86.0" bbox="[72.0, 245.859, 536.982, 331.859]" index="8"><LTTextLineHorizontal y0="320.859" y1="331.859" x0="72.0" x1="527.6" width="455.6" height="11.0" bbox="[72.0, 320.859, 527.6, 331.859]" word_margin="0.1">This turns off what is called &#8220;synchronized I/O&#8221;, which means that you&#8217;re not going to use both </LTTextLineHorizontal><LTTextLineHorizontal y0="305.359" y1="316.859" x0="72.0" x1="523.798" width="451.798" height="11.5" bbox="[72.0, 305.359, 523.798, 316.859]" word_margin="0.1">C-style (such as printf() and scanf()) and C++ style (cin, cout) in the same program. If </LTTextLineHorizontal><LTTextLineHorizontal y0="290.359" y1="301.859" x0="72.0" x1="530.026" width="458.026" height="11.5" bbox="[72.0, 290.359, 530.026, 301.859]" word_margin="0.1">you were doing both, you would need the compiler to keep your output synchronized: if a cout </LTTextLineHorizontal><LTTextLineHorizontal y0="275.359" y1="286.859" x0="72.0" x1="531.314" width="459.314" height="11.5" bbox="[72.0, 275.359, 531.314, 286.859]" word_margin="0.1">was executed before a printf(), the output of cout should appear first. Since you&#8217;re unlikely </LTTextLineHorizontal><LTTextLineHorizontal y0="260.859" y1="271.859" x0="72.0" x1="536.982" width="464.982" height="11.0" bbox="[72.0, 260.859, 536.982, 271.859]" word_margin="0.1">to be using both, telling the compiler that it doesn&#8217;t need to synchronize the I/O makes I/O much </LTTextLineHorizontal><LTTextLineHorizontal y0="245.859" y1="256.859" x0="72.0" x1="101.94" width="29.94" height="11.0" bbox="[72.0, 245.859, 101.94, 256.859]" word_margin="0.1">faster. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="170.859" y1="226.859" x0="72.0" x1="531.915" width="459.915" height="56.0" bbox="[72.0, 170.859, 531.915, 226.859]" index="9"><LTTextLineHorizontal y0="215.859" y1="226.859" x0="72.0" x1="514.381" width="442.381" height="11.0" bbox="[72.0, 215.859, 514.381, 226.859]" word_margin="0.1">Why are we having you do this? Because if some students knew this and others didn&#8217;t, the </LTTextLineHorizontal><LTTextLineHorizontal y0="200.859" y1="211.859" x0="72.0" x1="531.915" width="459.915" height="11.0" bbox="[72.0, 200.859, 531.915, 211.859]" word_margin="0.1">ones who knew it would have an easier time getting higher scores on the autograder. Thus we </LTTextLineHorizontal><LTTextLineHorizontal y0="185.859" y1="196.859" x0="72.0" x1="522.92" width="450.92" height="11.0" bbox="[72.0, 185.859, 522.92, 196.859]" word_margin="0.1">give this knowledge to everyone, and expect you to use it in every project. If your program is </LTTextLineHorizontal><LTTextLineHorizontal y0="170.859" y1="181.859" x0="72.0" x1="442.699" width="370.699" height="11.0" bbox="[72.0, 170.859, 442.699, 181.859]" word_margin="0.1">reading a 1KB input file it doesn&#8217;t make a difference, but a 1MB file it does&#8230; </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="110.359" y1="151.859" x0="72.0" x1="533.29" width="461.29" height="41.5" bbox="[72.0, 110.359, 533.29, 151.859]" index="10"><LTTextLineHorizontal y0="140.859" y1="151.859" x0="72.0" x1="533.29" width="461.29" height="11.0" bbox="[72.0, 140.859, 533.29, 151.859]" word_margin="0.1">One warning about this code, it can make some memory show up as &#8220;still reachable&#8221; when you </LTTextLineHorizontal><LTTextLineHorizontal y0="125.859" y1="136.859" x0="72.0" x1="513.758" width="441.758" height="11.0" bbox="[72.0, 125.859, 513.758, 136.859]" word_margin="0.1">run valgrind (around 126,880 bytes). The autograder will suppress any memory lost due to </LTTextLineHorizontal><LTTextLineHorizontal y0="110.359" y1="121.859" x0="72.0" x1="318.35" width="246.35" height="11.5" bbox="[72.0, 110.359, 318.35, 121.859]" word_margin="0.1">sync_with_stdio(), and not count it against you. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="11">5 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="6" rotate="0" page_index="5" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="662.109" y1="718.109" x0="72.0" x1="533.885" width="461.885" height="56.0" bbox="[72.0, 662.109, 533.885, 718.109]" index="0"><LTTextLineHorizontal y0="706.609" y1="718.109" x0="72.0" x1="517.347" width="445.347" height="11.5" bbox="[72.0, 706.609, 517.347, 718.109]" word_margin="0.1">Another thing that speeds up output is to use '\n' instead of endl. The reason here is that </LTTextLineHorizontal><LTTextLineHorizontal y0="691.609" y1="703.109" x0="72.0" x1="520.043" width="448.043" height="11.5" bbox="[72.0, 691.609, 520.043, 703.109]" word_margin="0.1">endl doesn&#8217;t just advance to a new line, it tells the OS to flush your buffer, meaning the data </LTTextLineHorizontal><LTTextLineHorizontal y0="677.109" y1="688.109" x0="72.0" x1="533.885" width="461.885" height="11.0" bbox="[72.0, 677.109, 533.885, 688.109]" word_margin="0.1">must be written to its final location (such as a file on the server) right now, not saved in memory </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="417.805" width="345.805" height="11.0" bbox="[72.0, 662.109, 417.805, 673.109]" word_margin="0.1">and written later, when more can be written at once (which saves time). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="601.609" y1="643.109" x0="72.0" x1="522.923" width="450.923" height="41.5" bbox="[72.0, 601.609, 522.923, 643.109]" index="1"><LTTextLineHorizontal y0="631.609" y1="643.109" x0="72.0" x1="516.618" width="444.618" height="11.5" bbox="[72.0, 631.609, 516.618, 643.109]" word_margin="0.1">You may have heard that you can use an ostringstream buffer to speed up output, or fill a </LTTextLineHorizontal><LTTextLineHorizontal y0="616.609" y1="628.109" x0="72.0" x1="522.923" width="450.923" height="11.5" bbox="[72.0, 616.609, 522.923, 628.109]" word_margin="0.1">string object with your output. As of g++ 6.2.0 and later the ostringstream does not help, </LTTextLineHorizontal><LTTextLineHorizontal y0="601.609" y1="613.109" x0="72.0" x1="384.205" width="312.205" height="11.5" bbox="[72.0, 601.609, 384.205, 613.109]" word_margin="0.1">and the string object makes it slower. Both use more memory. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="567.593" y1="581.593" x0="72.0" x1="224.435" width="152.435" height="14.0" bbox="[72.0, 567.593, 224.435, 581.593]" word_margin="0.1"><LTTextBoxHorizontal y0="567.593" y1="581.593" x0="72.0" x1="224.435" width="152.435" height="14.0" bbox="[72.0, 567.593, 224.435, 581.593]" index="2">Function Call Arguments </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="548.109" y1="559.109" x0="72.0" x1="400.099" width="328.099" height="11.0" bbox="[72.0, 548.109, 400.099, 559.109]" word_margin="0.1"><LTTextBoxHorizontal y0="548.109" y1="559.109" x0="72.0" x1="400.099" width="328.099" height="11.0" bbox="[72.0, 548.109, 400.099, 559.109]" index="3">When passing parameters to a function, follow a few rules, in order: </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="487.609" y1="529.109" x0="90.0" x1="477.325" width="387.325" height="41.5" bbox="[90.0, 487.609, 477.325, 529.109]" index="4"><LTTextLineHorizontal y0="518.109" y1="529.109" x0="90.0" x1="99.776" width="9.776" height="11.0" bbox="[90.0, 518.109, 99.776, 529.109]" word_margin="0.1">1) </LTTextLineHorizontal><LTTextLineHorizontal y0="518.109" y1="529.109" x0="108.0" x1="314.503" width="206.503" height="11.0" bbox="[108.0, 518.109, 314.503, 529.109]" word_margin="0.1">If it must be modified, pass it by reference. </LTTextLineHorizontal><LTTextLineHorizontal y0="503.109" y1="514.109" x0="90.0" x1="319.376" width="229.376" height="11.0" bbox="[90.0, 503.109, 319.376, 514.109]" word_margin="0.1">2) Else if it is a primitive type, pass it by value. </LTTextLineHorizontal><LTTextLineHorizontal y0="487.609" y1="499.109" x0="90.0" x1="477.325" width="387.325" height="11.5" bbox="[90.0, 487.609, 477.325, 499.109]" word_margin="0.1">3) Else if it is an object, pass it by const reference (i.e const string &amp;name). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="383.109" y1="469.109" x0="72.0" x1="539.414" width="467.414" height="86.0" bbox="[72.0, 383.109, 539.414, 469.109]" index="5"><LTTextLineHorizontal y0="458.109" y1="469.109" x0="72.0" x1="539.414" width="467.414" height="11.0" bbox="[72.0, 458.109, 539.414, 469.109]" word_margin="0.1">When you pass a primitive type by reference, it can be slower than passing it by value! When a </LTTextLineHorizontal><LTTextLineHorizontal y0="443.109" y1="454.109" x0="72.0" x1="518.074" width="446.074" height="11.0" bbox="[72.0, 443.109, 518.074, 454.109]" word_margin="0.1">variable is passed by reference, behind the scenes what may happen is that a pointer to the </LTTextLineHorizontal><LTTextLineHorizontal y0="427.609" y1="439.109" x0="72.0" x1="506.872" width="434.872" height="11.5" bbox="[72.0, 427.609, 506.872, 439.109]" word_margin="0.1">variable is passed by value. So instead of passing a 4 byte int, you&#8217;re passing an 8 byte </LTTextLineHorizontal><LTTextLineHorizontal y0="412.609" y1="424.109" x0="72.0" x1="528.448" width="456.448" height="11.5" bbox="[72.0, 412.609, 528.448, 424.109]" word_margin="0.1">pointer to an int. Also, instead of accessing the int directly, you have to follow the pointer to </LTTextLineHorizontal><LTTextLineHorizontal y0="397.609" y1="409.109" x0="72.0" x1="508.469" width="436.469" height="11.5" bbox="[72.0, 397.609, 508.469, 409.109]" word_margin="0.1">where the int is located. This effectively doubles the amount of time to access the actual </LTTextLineHorizontal><LTTextLineHorizontal y0="383.109" y1="394.109" x0="72.0" x1="330.474" width="258.474" height="11.0" bbox="[72.0, 383.109, 330.474, 394.109]" word_margin="0.1">value, and uses up an extra 4 bytes on the call stack. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="348.593" y1="362.593" x0="72.0" x1="188.677" width="116.677" height="14.0" bbox="[72.0, 348.593, 188.677, 362.593]" word_margin="0.1"><LTTextBoxHorizontal y0="348.593" y1="362.593" x0="72.0" x1="188.677" width="116.677" height="14.0" bbox="[72.0, 348.593, 188.677, 362.593]" index="6">Code Organization </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="299.109" y1="340.109" x0="72.0" x1="528.942" width="456.942" height="41.0" bbox="[72.0, 299.109, 528.942, 340.109]" index="7"><LTTextLineHorizontal y0="328.609" y1="340.109" x0="72.0" x1="526.133" width="454.133" height="11.5" bbox="[72.0, 328.609, 526.133, 340.109]" word_margin="0.1">If code &#8220;goes together&#8221;, put it together. For example, if I had to manipulate Student objects, I </LTTextLineHorizontal><LTTextLineHorizontal y0="313.609" y1="325.109" x0="72.0" x1="528.942" width="456.942" height="11.5" bbox="[72.0, 313.609, 528.942, 325.109]" word_margin="0.1">would put the declaration in Student.h and the implementation in Student.cpp (more on this </LTTextLineHorizontal><LTTextLineHorizontal y0="299.109" y1="310.109" x0="72.0" x1="107.437" width="35.437" height="11.0" bbox="[72.0, 299.109, 107.437, 310.109]" word_margin="0.1">below). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="89.109" y1="280.109" x0="72.0" x1="539.032" width="467.032" height="191.0" bbox="[72.0, 89.109, 539.032, 280.109]" index="8"><LTTextLineHorizontal y0="269.109" y1="280.109" x0="72.0" x1="534.463" width="462.463" height="11.0" bbox="[72.0, 269.109, 534.463, 280.109]" word_margin="0.1">When you&#8217;re writing a class, implement small member functions (especially getters and setters) </LTTextLineHorizontal><LTTextLineHorizontal y0="254.109" y1="265.109" x0="72.0" x1="529.444" width="457.444" height="11.0" bbox="[72.0, 254.109, 529.444, 265.109]" word_margin="0.1">inside the header file. If it&#8217;s a larger function that isn&#8217;t called often, implement it in the .cpp file. </LTTextLineHorizontal><LTTextLineHorizontal y0="238.609" y1="250.109" x0="72.0" x1="533.873" width="461.873" height="11.5" bbox="[72.0, 238.609, 533.873, 250.109]" word_margin="0.1">This is due to code inlining. What does that mean? When function foo() calls function bar(), </LTTextLineHorizontal><LTTextLineHorizontal y0="223.609" y1="235.109" x0="72.0" x1="526.967" width="454.967" height="11.5" bbox="[72.0, 223.609, 526.967, 235.109]" word_margin="0.1">you&#8217;ve learned that there&#8217;s a compiled version of foo() and a compiled version of bar(), and </LTTextLineHorizontal><LTTextLineHorizontal y0="209.109" y1="220.109" x0="72.0" x1="521.696" width="449.696" height="11.0" bbox="[72.0, 209.109, 521.696, 220.109]" word_margin="0.1">that the information needed to call bar() is put on the call stack, etc. However, if you&#8217;re using </LTTextLineHorizontal><LTTextLineHorizontal y0="193.609" y1="205.109" x0="72.0" x1="522.7" width="450.7" height="11.5" bbox="[72.0, 193.609, 522.7, 205.109]" word_margin="0.1">code optimization (the -O3 flag) the compiler tries to inline every function possible. What this </LTTextLineHorizontal><LTTextLineHorizontal y0="178.609" y1="190.109" x0="72.0" x1="518.954" width="446.954" height="11.5" bbox="[72.0, 178.609, 518.954, 190.109]" word_margin="0.1">means is that instead of there being one compiled version of bar(), the code that makes up </LTTextLineHorizontal><LTTextLineHorizontal y0="163.609" y1="175.109" x0="72.0" x1="525.26" width="453.26" height="11.5" bbox="[72.0, 163.609, 525.26, 175.109]" word_margin="0.1">bar() is actually substituted inside of foo()! If foo() calls bar() twice, there ends up being </LTTextLineHorizontal><LTTextLineHorizontal y0="148.609" y1="160.109" x0="72.0" x1="516.769" width="444.769" height="11.5" bbox="[72.0, 148.609, 516.769, 160.109]" word_margin="0.1">two copies of the foo() code inside of bar(). This makes the executable bigger but it runs </LTTextLineHorizontal><LTTextLineHorizontal y0="134.109" y1="145.109" x0="72.0" x1="539.032" width="467.032" height="11.0" bbox="[72.0, 134.109, 539.032, 145.109]" word_margin="0.1">faster, because there&#8217;s no need to put anything on the call stack. This is why we suggest writing </LTTextLineHorizontal><LTTextLineHorizontal y0="119.109" y1="130.109" x0="72.0" x1="519.281" width="447.281" height="11.0" bbox="[72.0, 119.109, 519.281, 130.109]" word_margin="0.1">small functions like getters and setters inside the .h file, because then they can be inlined by </LTTextLineHorizontal><LTTextLineHorizontal y0="104.109" y1="115.109" x0="72.0" x1="533.945" width="461.945" height="11.0" bbox="[72.0, 104.109, 533.945, 115.109]" word_margin="0.1">any code that calls them. If you put them inside the .cpp file, they can only be inlined within the </LTTextLineHorizontal><LTTextLineHorizontal y0="89.109" y1="100.109" x0="72.0" x1="378.721" width="306.721" height="11.0" bbox="[72.0, 89.109, 378.721, 100.109]" word_margin="0.1">same .cpp file, other .cpp files would have to use the call stack. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="9">6 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="7" rotate="0" page_index="6" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="647.109" y1="718.109" x0="72.0" x1="535.726" width="463.726" height="71.0" bbox="[72.0, 647.109, 535.726, 718.109]" index="0"><LTTextLineHorizontal y0="707.109" y1="718.109" x0="72.0" x1="527.853" width="455.853" height="11.0" bbox="[72.0, 707.109, 527.853, 718.109]" word_margin="0.1">These suggestions apply to standalone functions also. If you have two functions that call each </LTTextLineHorizontal><LTTextLineHorizontal y0="691.609" y1="703.109" x0="72.0" x1="535.07" width="463.07" height="11.5" bbox="[72.0, 691.609, 535.07, 703.109]" word_margin="0.1">other numerous times, put them in the same .cpp file. If foo() only calls bar() once, it doesn&#8217;t </LTTextLineHorizontal><LTTextLineHorizontal y0="677.109" y1="688.109" x0="72.0" x1="535.726" width="463.726" height="11.0" bbox="[72.0, 677.109, 535.726, 688.109]" word_margin="0.1">matter whether they&#8217;re in the same .cpp file or not. Don&#8217;t avoid making multiple .cpp files just to </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="516.233" width="444.233" height="11.0" bbox="[72.0, 662.109, 516.233, 673.109]" word_margin="0.1">make things fast! Organize the code well, and put functions that call each other often in the </LTTextLineHorizontal><LTTextLineHorizontal y0="647.109" y1="658.109" x0="72.0" x1="142.872" width="70.872" height="11.0" bbox="[72.0, 647.109, 142.872, 658.109]" word_margin="0.1">same .cpp file. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="572.109" y1="628.109" x0="72.0" x1="532.699" width="460.699" height="56.0" bbox="[72.0, 572.109, 532.699, 628.109]" index="1"><LTTextLineHorizontal y0="617.109" y1="628.109" x0="72.0" x1="531.878" width="459.878" height="11.0" bbox="[72.0, 617.109, 531.878, 628.109]" word_margin="0.1">Write functions to avoid code duplication. If you find yourself writing the same code twice, take </LTTextLineHorizontal><LTTextLineHorizontal y0="602.109" y1="613.109" x0="72.0" x1="489.99" width="417.99" height="11.0" bbox="[72.0, 602.109, 489.99, 613.109]" word_margin="0.1">a step back and think about how you can use a function and then write the code once. </LTTextLineHorizontal><LTTextLineHorizontal y0="587.109" y1="598.109" x0="72.0" x1="532.699" width="460.699" height="11.0" bbox="[72.0, 587.109, 532.699, 598.109]" word_margin="0.1">Otherwise you&#8217;ll spend too much time trying to fix a bug in one version, make a parallel change </LTTextLineHorizontal><LTTextLineHorizontal y0="572.109" y1="583.109" x0="72.0" x1="189.315" width="117.315" height="11.0" bbox="[72.0, 572.109, 189.315, 583.109]" word_margin="0.1">in the other version, etc. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="497.109" y1="553.109" x0="72.0" x1="538.233" width="466.233" height="56.0" bbox="[72.0, 497.109, 538.233, 553.109]" index="2"><LTTextLineHorizontal y0="542.109" y1="553.109" x0="72.0" x1="502.989" width="430.989" height="11.0" bbox="[72.0, 542.109, 502.989, 553.109]" word_margin="0.1">You can add command line options that are not required by the project specification! For </LTTextLineHorizontal><LTTextLineHorizontal y0="526.609" y1="538.109" x0="72.0" x1="498.043" width="426.043" height="11.5" bbox="[72.0, 526.609, 498.043, 538.109]" word_margin="0.1">example, you could add a --debug flag, a --verbose flag, etc. Just make sure that the </LTTextLineHorizontal><LTTextLineHorizontal y0="512.109" y1="523.109" x0="72.0" x1="538.233" width="466.233" height="11.0" bbox="[72.0, 512.109, 538.233, 523.109]" word_margin="0.1">corresponding code does not do too much work when these options are not specified, otherwise </LTTextLineHorizontal><LTTextLineHorizontal y0="497.109" y1="508.109" x0="72.0" x1="258.955" width="186.955" height="11.0" bbox="[72.0, 497.109, 258.955, 508.109]" word_margin="0.1">it might slow down program execution. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="462.593" y1="476.593" x0="72.0" x1="206.023" width="134.023" height="14.0" bbox="[72.0, 462.593, 206.023, 476.593]" word_margin="0.1"><LTTextBoxHorizontal y0="462.593" y1="476.593" x0="72.0" x1="206.023" width="134.023" height="14.0" bbox="[72.0, 462.593, 206.023, 476.593]" index="3">Use of STL Functions </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="413.109" y1="454.109" x0="72.0" x1="526.154" width="454.154" height="41.0" bbox="[72.0, 413.109, 526.154, 454.109]" index="4"><LTTextLineHorizontal y0="443.109" y1="454.109" x0="72.0" x1="526.154" width="454.154" height="11.0" bbox="[72.0, 443.109, 526.154, 454.109]" word_margin="0.1">When using STL functions, or member functions for STL containers, be aware of exactly what </LTTextLineHorizontal><LTTextLineHorizontal y0="428.109" y1="439.109" x0="72.0" x1="484.869" width="412.869" height="11.0" bbox="[72.0, 428.109, 484.869, 439.109]" word_margin="0.1">it&#8217;s doing under the shroud of the function call and what the complexity of doing so is. </LTTextLineHorizontal><LTTextLineHorizontal y0="413.109" y1="424.109" x0="72.0" x1="250.206" width="178.206" height="11.0" bbox="[72.0, 413.109, 250.206, 424.109]" word_margin="0.1">Sometimes it&#8217;s not what you wanted! </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="308.109" y1="394.109" x0="72.0" x1="536.824" width="464.824" height="86.0" bbox="[72.0, 308.109, 536.824, 394.109]" index="5"><LTTextLineHorizontal y0="382.609" y1="394.109" x0="72.0" x1="524.015" width="452.015" height="11.5" bbox="[72.0, 382.609, 524.015, 394.109]" word_margin="0.1">For example, inserting an element at an arbitrary position in a std::vector is a single call to </LTTextLineHorizontal><LTTextLineHorizontal y0="367.609" y1="379.109" x0="72.0" x1="536.824" width="464.824" height="11.5" bbox="[72.0, 367.609, 536.824, 379.109]" word_margin="0.1">vector::insert(), but because std::vector is represented &#8220;behind the scenes&#8221; as an array, </LTTextLineHorizontal><LTTextLineHorizontal y0="353.109" y1="364.109" x0="272.666" x1="530.525" width="257.859" height="11.0" bbox="[272.666, 353.109, 530.525, 364.109]" word_margin="0.1">shift of all the elements, which can end up being very </LTTextLineHorizontal><LTTextLineHorizontal y0="353.109" y1="364.109" x0="72.0" x1="243.698" width="171.698" height="11.0" bbox="[72.0, 353.109, 243.698, 364.109]" word_margin="0.1">to insert into the middle requires an </LTTextLineHorizontal><LTTextLineHorizontal y0="338.109" y1="349.109" x0="72.0" x1="528.848" width="456.848" height="11.0" bbox="[72.0, 338.109, 528.848, 349.109]" word_margin="0.1">expensive depending on how many times the operation is performed. To find the complexity of </LTTextLineHorizontal><LTTextLineHorizontal y0="323.109" y1="334.109" x0="72.0" x1="516.198" width="444.198" height="11.0" bbox="[72.0, 323.109, 516.198, 334.109]" word_margin="0.1">any given STL function, you can always check its documentation (for example here or here, <LTLine y0="324.5" y1="324.5" x0="453.0" x1="475.0" width="22.0" height="0.0" bbox="[453.0, 324.5, 475.0, 324.5]" linewidth="0" pts="[[453.0, 324.5], [475.0, 324.5]]"/><LTLine y0="324.5" y1="324.5" x0="491.0" x1="513.0" width="22.0" height="0.0" bbox="[491.0, 324.5, 513.0, 324.5]" linewidth="0" pts="[[491.0, 324.5], [513.0, 324.5]]"/></LTTextLineHorizontal><LTTextLineHorizontal y0="308.109" y1="319.109" x0="72.0" x1="237.545" width="165.545" height="11.0" bbox="[72.0, 308.109, 237.545, 319.109]" word_margin="0.1">search for the word &#8220;Complexity&#8221;). </LTTextLineHorizontal><LTTextLineHorizontal y0="352.996" y1="363.996" x0="246.748" x1="269.616" width="22.868" height="11.0" bbox="[246.748, 352.996, 269.616, 363.996]" word_margin="0.1"><LTTextBoxHorizontal y0="352.996" y1="363.996" x0="246.748" x1="269.616" width="22.868" height="11.0" bbox="[246.748, 352.996, 269.616, 363.996]" index="6">() </LTTextBoxHorizontal></LTTextLineHorizontal><Annot Type="/Annot" Subtype="/Link" F="4" Border="[0, 0, 0]" A="{&quot;S&quot;: &quot;/URI&quot;, &quot;Type&quot;: &quot;/Action&quot;, &quot;URI&quot;: &quot;http://www.cplusplus.com/reference/vector/vector/insert/&quot;}" bbox="[453.25931, 322.79999, 475.25977, 336]" x0="453.25931" x1="475.25977" y0="322.79999" y1="336" height="13.20001000000002" width="22.000459999999975" URI="http://www.cplusplus.com/reference/vector/vector/insert/"/><Annot Type="/Annot" Subtype="/Link" F="4" Border="[0, 0, 0]" A="{&quot;S&quot;: &quot;/URI&quot;, &quot;Type&quot;: &quot;/Action&quot;, &quot;URI&quot;: &quot;http://en.cppreference.com/w/cpp/container/vector/insert&quot;}" bbox="[491.14154, 322.79999, 513.14203, 336]" x0="491.14154" x1="513.14203" y0="322.79999" y1="336" height="13.20001000000002" width="22.000489999999957" URI="http://en.cppreference.com/w/cpp/container/vector/insert"/></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="273.593" y1="287.593" x0="72.0" x1="169.211" width="97.211" height="14.0" bbox="[72.0, 273.593, 169.211, 287.593]" word_margin="0.1"><LTTextBoxHorizontal y0="273.593" y1="287.593" x0="72.0" x1="169.211" width="97.211" height="14.0" bbox="[72.0, 273.593, 169.211, 287.593]" index="7">Data Structures </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="182.109" y1="253.109" x0="72.0" x1="529.669" width="457.669" height="71.0" bbox="[72.0, 182.109, 529.669, 253.109]" index="8"><LTTextLineHorizontal y0="242.109" y1="253.109" x0="72.0" x1="502.759" width="430.759" height="11.0" bbox="[72.0, 242.109, 502.759, 253.109]" word_margin="0.1">If I were making a program to manipulate students, I would not create a vector of student </LTTextLineHorizontal><LTTextLineHorizontal y0="227.109" y1="238.109" x0="72.0" x1="508.874" width="436.874" height="11.0" bbox="[72.0, 227.109, 508.874, 238.109]" word_margin="0.1">names, a vector of student addresses, a vector of student zip codes, etc. I would create a </LTTextLineHorizontal><LTTextLineHorizontal y0="211.609" y1="223.109" x0="72.0" x1="508.031" width="436.031" height="11.5" bbox="[72.0, 211.609, 508.031, 223.109]" word_margin="0.1">Student object, and create a vector&lt;Student&gt; students. This not only improves code </LTTextLineHorizontal><LTTextLineHorizontal y0="197.109" y1="208.109" x0="72.0" x1="529.669" width="457.669" height="11.0" bbox="[72.0, 197.109, 529.669, 208.109]" word_margin="0.1">organization, it improves speed! To understand why this happens, you need to know a little bit </LTTextLineHorizontal><LTTextLineHorizontal y0="182.109" y1="193.109" x0="72.0" x1="206.415" width="134.415" height="11.0" bbox="[72.0, 182.109, 206.415, 193.109]" word_margin="0.1">about how computers work. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="87.609" y1="173.609" x0="72.0" x1="539.992" width="467.992" height="86.0" bbox="[72.0, 87.609, 539.992, 173.609]" index="9"><LTTextLineHorizontal y0="162.609" y1="173.609" x0="72.0" x1="536.906" width="464.906" height="11.0" bbox="[72.0, 162.609, 536.906, 173.609]" word_margin="0.1">RAM (random access memory) is slow compared to the CPU. Reading one value from a vector </LTTextLineHorizontal><LTTextLineHorizontal y0="147.609" y1="158.609" x0="72.0" x1="498.89" width="426.89" height="11.0" bbox="[72.0, 147.609, 498.89, 158.609]" word_margin="0.1">might take the same amount of time as performing 20 additions or subtractions. To help </LTTextLineHorizontal><LTTextLineHorizontal y0="132.609" y1="143.609" x0="72.0" x1="539.992" width="467.992" height="11.0" bbox="[72.0, 132.609, 539.992, 143.609]" word_margin="0.1">alleviate this problem, computers are designed with a cache -- an area of memory that is smaller </LTTextLineHorizontal><LTTextLineHorizontal y0="117.609" y1="128.609" x0="72.0" x1="528.416" width="456.416" height="11.0" bbox="[72.0, 117.609, 528.416, 128.609]" word_margin="0.1">than RAM but much faster. This cache keeps copies of things from RAM that have been used </LTTextLineHorizontal><LTTextLineHorizontal y0="102.109" y1="113.609" x0="72.0" x1="533.04" width="461.04" height="11.5" bbox="[72.0, 102.109, 533.04, 113.609]" word_margin="0.1">recently. When I want to read data[i] and there&#8217;s no copy in the cache (called a cache miss), </LTTextLineHorizontal><LTTextLineHorizontal y0="87.609" y1="98.609" x0="72.0" x1="512.532" width="440.532" height="11.0" bbox="[72.0, 87.609, 512.532, 98.609]" word_margin="0.1">the computer spends the time to load data[i] from RAM and keep it in the cache. However, </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="10">7 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="8" rotate="0" page_index="7" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="632.109" y1="718.109" x0="72.0" x1="533.8" width="461.8" height="86.0" bbox="[72.0, 632.109, 533.8, 718.109]" index="0"><LTTextLineHorizontal y0="706.609" y1="718.109" x0="72.0" x1="533.8" width="461.8" height="11.5" bbox="[72.0, 706.609, 533.8, 718.109]" word_margin="0.1">since I&#8217;m very likely to be looking at data[i + 1] in the near future, and since reading multiple </LTTextLineHorizontal><LTTextLineHorizontal y0="692.109" y1="703.109" x0="72.0" x1="516.211" width="444.211" height="11.0" bbox="[72.0, 692.109, 516.211, 703.109]" word_margin="0.1">values from slow RAM doesn&#8217;t take much longer than reading one value, the cache actually </LTTextLineHorizontal><LTTextLineHorizontal y0="676.609" y1="688.109" x0="72.0" x1="506.947" width="434.947" height="11.5" bbox="[72.0, 676.609, 506.947, 688.109]" word_margin="0.1">makes copies of data[i], data[i + 1], data[i + 2] &#8230; data[i + k], where [0...k] </LTTextLineHorizontal><LTTextLineHorizontal y0="661.609" y1="673.109" x0="72.0" x1="530.228" width="458.228" height="11.5" bbox="[72.0, 661.609, 530.228, 673.109]" word_margin="0.1">represents the largest number of values that can be read at once (k depends on the computer, </LTTextLineHorizontal><LTTextLineHorizontal y0="646.609" y1="658.109" x0="72.0" x1="500.989" width="428.989" height="11.5" bbox="[72.0, 646.609, 500.989, 658.109]" word_margin="0.1">data type, etc.). Now when my loop increases i and reads the next value from data, it&#8217;s </LTTextLineHorizontal><LTTextLineHorizontal y0="632.109" y1="643.109" x0="72.0" x1="439.221" width="367.221" height="11.0" bbox="[72.0, 632.109, 439.221, 643.109]" word_margin="0.1">already in the cache (called a cache hit), and can be accessed very quickly! </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="557.109" y1="613.109" x0="72.0" x1="534.415" width="462.415" height="56.0" bbox="[72.0, 557.109, 534.415, 613.109]" index="1"><LTTextLineHorizontal y0="602.109" y1="613.109" x0="72.0" x1="518.642" width="446.642" height="11.0" bbox="[72.0, 602.109, 518.642, 613.109]" word_margin="0.1">If I had two vectors (say student names and student zip codes), I would get a cache miss on </LTTextLineHorizontal><LTTextLineHorizontal y0="586.609" y1="598.109" x0="72.0" x1="526.816" width="454.816" height="11.5" bbox="[72.0, 586.609, 526.816, 598.109]" word_margin="0.1">names[i], and another cache miss on zips[i]. If instead they&#8217;re in the same vector, I would </LTTextLineHorizontal><LTTextLineHorizontal y0="571.609" y1="583.109" x0="72.0" x1="534.415" width="462.415" height="11.5" bbox="[72.0, 571.609, 534.415, 583.109]" word_margin="0.1">only get one cache miss, on students[i]. This is why having one vector of data can be faster </LTTextLineHorizontal><LTTextLineHorizontal y0="557.109" y1="568.109" x0="72.0" x1="116.61" width="44.61" height="11.0" bbox="[72.0, 557.109, 116.61, 568.109]" word_margin="0.1">than two. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="522.593" y1="536.593" x0="72.0" x1="392.402" width="320.402" height="14.0" bbox="[72.0, 522.593, 392.402, 536.593]" word_margin="0.1"><LTTextBoxHorizontal y0="522.593" y1="536.593" x0="72.0" x1="392.402" width="320.402" height="14.0" bbox="[72.0, 522.593, 392.402, 536.593]" index="2">Red Herrings (i.e., performance optimization don&#8217;ts) </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="458.109" y1="514.109" x0="72.0" x1="539.6" width="467.6" height="56.0" bbox="[72.0, 458.109, 539.6, 514.109]" index="3"><LTTextLineHorizontal y0="503.109" y1="514.109" x0="72.0" x1="539.6" width="467.6" height="11.0" bbox="[72.0, 503.109, 539.6, 514.109]" word_margin="0.1">Part of knowing what is effective for optimizing programs is knowing what isn&#8217;t effective and your </LTTextLineHorizontal><LTTextLineHorizontal y0="488.109" y1="499.109" x0="72.0" x1="535.554" width="463.554" height="11.0" bbox="[72.0, 488.109, 535.554, 499.109]" word_margin="0.1">time is better spent looking at other things to improve performance. These are a few techniques </LTTextLineHorizontal><LTTextLineHorizontal y0="473.109" y1="484.109" x0="72.0" x1="517.438" width="445.438" height="11.0" bbox="[72.0, 473.109, 517.438, 484.109]" word_margin="0.1">that we commonly see that are attractive to students because they appear to produce faster </LTTextLineHorizontal><LTTextLineHorizontal y0="458.109" y1="469.109" x0="72.0" x1="363.847" width="291.847" height="11.0" bbox="[72.0, 458.109, 363.847, 469.109]" word_margin="0.1">code, but in reality have little, if any, impact on performance: </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="413.109" y1="439.109" x0="72.0" x1="449.614" width="377.614" height="26.0" bbox="[72.0, 413.109, 449.614, 439.109]" index="4"><LTTextLineHorizontal y0="428.109" y1="439.109" x0="72.0" x1="147.779" width="75.779" height="11.0" bbox="[72.0, 428.109, 147.779, 439.109]" word_margin="0.1">Coding densely </LTTextLineHorizontal><LTTextLineHorizontal y0="413.109" y1="424.109" x0="72.0" x1="449.614" width="377.614" height="11.0" bbox="[72.0, 413.109, 449.614, 424.109]" word_margin="0.1">Say you want a function to find the area of a cone. Which version runs faster? </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="367.609" y1="393.609" x0="72.0" x1="301.659" width="229.659" height="26.0" bbox="[72.0, 367.609, 301.659, 393.609]" index="5"><LTTextLineHorizontal y0="382.609" y1="393.609" x0="72.0" x1="301.659" width="229.659" height="11.0" bbox="[72.0, 382.609, 301.659, 393.609]" word_margin="0.1">double cone_area(double r, double h) { </LTTextLineHorizontal><LTTextLineHorizontal y0="367.609" y1="378.609" x0="96.174" x1="277.485" width="181.311" height="11.0" bbox="[96.174, 367.609, 277.485, 378.609]" word_margin="0.1">double base_area = PI * r * r; </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="322.609" y1="348.609" x0="96.174" x1="374.182" width="278.008" height="26.0" bbox="[96.174, 322.609, 374.182, 348.609]" index="6"><LTTextLineHorizontal y0="337.609" y1="348.609" x0="96.174" x1="374.182" width="278.008" height="11.0" bbox="[96.174, 337.609, 374.182, 348.609]" word_margin="0.1">double slant_length = r + sqrt(h * h + r * r); </LTTextLineHorizontal><LTTextLineHorizontal y0="322.609" y1="333.609" x0="96.174" x1="350.008" width="253.834" height="11.0" bbox="[96.174, 322.609, 350.008, 333.609]" word_margin="0.1">double slant_area = PI * r * slant_length; </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="292.609" y1="303.609" x0="96.174" x1="277.485" width="181.311" height="11.0" bbox="[96.174, 292.609, 277.485, 303.609]" word_margin="0.1"><LTTextBoxHorizontal y0="292.609" y1="303.609" x0="96.174" x1="277.485" width="181.311" height="11.0" bbox="[96.174, 292.609, 277.485, 303.609]" index="7">return base_area + slant_area; </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="277.609" y1="288.609" x0="72.0" x1="168.701" width="96.701" height="11.0" bbox="[72.0, 277.609, 168.701, 288.609]" word_margin="0.1"><LTTextBoxHorizontal y0="277.609" y1="288.609" x0="72.0" x1="168.701" width="96.701" height="11.0" bbox="[72.0, 277.609, 168.701, 288.609]" index="8">} // cone_area() </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="248.109" y1="259.109" x0="72.0" x1="84.213" width="12.213" height="11.0" bbox="[72.0, 248.109, 84.213, 259.109]" word_margin="0.1"><LTTextBoxHorizontal y0="248.109" y1="259.109" x0="72.0" x1="84.213" width="12.213" height="11.0" bbox="[72.0, 248.109, 84.213, 259.109]" index="9">Or </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="217.609" y1="228.609" x0="72.0" x1="307.703" width="235.703" height="11.0" bbox="[72.0, 217.609, 307.703, 228.609]" word_margin="0.1"><LTTextBoxHorizontal y0="217.609" y1="228.609" x0="72.0" x1="307.703" width="235.703" height="11.0" bbox="[72.0, 217.609, 307.703, 228.609]" index="10">double cone_area2(double r, double h) { </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="202.609" y1="213.609" x0="96.174" x1="428.574" width="332.4" height="11.0" bbox="[96.174, 202.609, 428.574, 213.609]" word_margin="0.1"><LTTextBoxHorizontal y0="202.609" y1="213.609" x0="96.174" x1="428.574" width="332.4" height="11.0" bbox="[96.174, 202.609, 428.574, 213.609]" index="11">return PI * r * r + PI * r * (r + sqrt(h * h + r * r)); </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="187.609" y1="198.609" x0="72.0" x1="174.745" width="102.745" height="11.0" bbox="[72.0, 187.609, 174.745, 198.609]" word_margin="0.1"><LTTextBoxHorizontal y0="187.609" y1="198.609" x0="72.0" x1="174.745" width="102.745" height="11.0" bbox="[72.0, 187.609, 174.745, 198.609]" index="12">} // cone_area2() </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="112.609" y1="169.109" x0="72.0" x1="530.749" width="458.749" height="56.5" bbox="[72.0, 112.609, 530.749, 169.109]" index="13"><LTTextLineHorizontal y0="157.609" y1="169.109" x0="72.0" x1="499.401" width="427.401" height="11.5" bbox="[72.0, 157.609, 499.401, 169.109]" word_margin="0.1">It&#8217;s easy to think that because cone_area() creates all these variables and splits up the </LTTextLineHorizontal><LTTextLineHorizontal y0="142.609" y1="154.109" x0="72.0" x1="527.643" width="455.643" height="11.5" bbox="[72.0, 142.609, 527.643, 154.109]" word_margin="0.1">computation that it will be slower than cone_area2(), where all the computation happens in a </LTTextLineHorizontal><LTTextLineHorizontal y0="128.109" y1="139.109" x0="72.0" x1="524.743" width="452.743" height="11.0" bbox="[72.0, 128.109, 524.743, 139.109]" word_margin="0.1">single expression. But the strength of compiler optimizations is such that intermediate values, </LTTextLineHorizontal><LTTextLineHorizontal y0="112.609" y1="124.109" x0="72.0" x1="530.749" width="458.749" height="11.5" bbox="[72.0, 112.609, 530.749, 124.109]" word_margin="0.1">like in cone_area(), can be automatically computed without actually being stored in variables. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="14">8 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="9" rotate="0" page_index="8" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="662.109" y1="718.109" x0="72.0" x1="529.83" width="457.83" height="56.0" bbox="[72.0, 662.109, 529.83, 718.109]" index="0"><LTTextLineHorizontal y0="707.109" y1="718.109" x0="72.0" x1="514.965" width="442.965" height="11.0" bbox="[72.0, 707.109, 514.965, 718.109]" word_margin="0.1">Now, given that both functions will produce the same machine instructions, which version is </LTTextLineHorizontal><LTTextLineHorizontal y0="692.109" y1="703.109" x0="72.0" x1="524.16" width="452.16" height="11.0" bbox="[72.0, 692.109, 524.16, 703.109]" word_margin="0.1">more readable? If there is a mistake in one of the calculations, which will be easier to debug? </LTTextLineHorizontal><LTTextLineHorizontal y0="677.109" y1="688.109" x0="72.0" x1="529.83" width="457.83" height="11.0" bbox="[72.0, 677.109, 529.83, 688.109]" word_margin="0.1">Lastly, if you were having trouble with this function in office hours, which version would make it </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="365.283" width="293.283" height="11.0" bbox="[72.0, 662.109, 365.283, 673.109]" word_margin="0.1">easier for an instructor to figure out what you&#8217;re trying to do? </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="602.109" y1="643.109" x0="72.0" x1="535.807" width="463.807" height="41.0" bbox="[72.0, 602.109, 535.807, 643.109]" index="1"><LTTextLineHorizontal y0="632.109" y1="643.109" x0="72.0" x1="494.801" width="422.801" height="11.0" bbox="[72.0, 632.109, 494.801, 643.109]" word_margin="0.1">Note that while this here is a toy example, you could easily have a much more complex </LTTextLineHorizontal><LTTextLineHorizontal y0="617.109" y1="628.109" x0="72.0" x1="535.807" width="463.807" height="11.0" bbox="[72.0, 617.109, 535.807, 628.109]" word_margin="0.1">computation sequence where being able to properly name and see the contents of intermediate </LTTextLineHorizontal><LTTextLineHorizontal y0="602.109" y1="613.109" x0="72.0" x1="456.321" width="384.321" height="11.0" bbox="[72.0, 602.109, 456.321, 613.109]" word_margin="0.1">results makes your life much easier both in writing and debugging the program. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="467.109" y1="583.109" x0="72.0" x1="538.254" width="466.254" height="116.0" bbox="[72.0, 467.109, 538.254, 583.109]" index="2"><LTTextLineHorizontal y0="572.109" y1="583.109" x0="72.0" x1="250.434" width="178.434" height="11.0" bbox="[72.0, 572.109, 250.434, 583.109]" word_margin="0.1">Function calls and code organization </LTTextLineHorizontal><LTTextLineHorizontal y0="557.109" y1="568.109" x0="72.0" x1="492.985" width="420.985" height="11.0" bbox="[72.0, 557.109, 492.985, 568.109]" word_margin="0.1">There is sometimes a belief that the use of functions introduces a significant amount of </LTTextLineHorizontal><LTTextLineHorizontal y0="542.109" y1="553.109" x0="72.0" x1="511.987" width="439.987" height="11.0" bbox="[72.0, 542.109, 511.987, 553.109]" word_margin="0.1">overhead, and that the same code inlined &#8220;by hand&#8221; (i.e., copied and pasted in place of the </LTTextLineHorizontal><LTTextLineHorizontal y0="527.109" y1="538.109" x0="72.0" x1="534.47" width="462.47" height="11.0" bbox="[72.0, 527.109, 534.47, 538.109]" word_margin="0.1">function call) will result in better performance. In its worst form, this leads to excessive amounts </LTTextLineHorizontal><LTTextLineHorizontal y0="512.109" y1="523.109" x0="72.0" x1="538.254" width="466.254" height="11.0" bbox="[72.0, 512.109, 538.254, 523.109]" word_margin="0.1">of code duplication and will cause you massive headaches with debugging and making changes </LTTextLineHorizontal><LTTextLineHorizontal y0="497.109" y1="508.109" x0="72.0" x1="501.311" width="429.311" height="11.0" bbox="[72.0, 497.109, 501.311, 508.109]" word_margin="0.1">to that segment of code. In reality, compiler optimizations will take care of inlining for you </LTTextLineHorizontal><LTTextLineHorizontal y0="482.109" y1="493.109" x0="72.0" x1="523.932" width="451.932" height="11.0" bbox="[72.0, 482.109, 523.932, 493.109]" word_margin="0.1">(hooray!), and in the cases where it cannot (the function is large, has weird side effects, etc.), </LTTextLineHorizontal><LTTextLineHorizontal y0="467.109" y1="478.109" x0="72.0" x1="344.52" width="272.52" height="11.0" bbox="[72.0, 467.109, 344.52, 478.109]" word_margin="0.1">the overhead of calling the function is likely insignificant. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="392.109" y1="448.109" x0="72.0" x1="539.213" width="467.213" height="56.0" bbox="[72.0, 392.109, 539.213, 448.109]" index="3"><LTTextLineHorizontal y0="437.109" y1="448.109" x0="72.0" x1="531.519" width="459.519" height="11.0" bbox="[72.0, 437.109, 531.519, 448.109]" word_margin="0.1">Along the same lines, there is a tendency for students to believe that a data type declared as a </LTTextLineHorizontal><LTTextLineHorizontal y0="421.609" y1="433.109" x0="72.0" x1="528.915" width="456.915" height="11.5" bbox="[72.0, 421.609, 528.915, 433.109]" word_margin="0.1">struct is faster to access or create than a data type declared as a class. In C++, structs and </LTTextLineHorizontal><LTTextLineHorizontal y0="407.109" y1="418.109" x0="72.0" x1="539.213" width="467.213" height="11.0" bbox="[72.0, 407.109, 539.213, 418.109]" word_margin="0.1">classes are nearly identical, with the sole difference being whether their members have public or </LTTextLineHorizontal><LTTextLineHorizontal y0="392.109" y1="403.109" x0="72.0" x1="494.783" width="422.783" height="11.0" bbox="[72.0, 392.109, 494.783, 403.109]" word_margin="0.1">private access by default. This is limited by the &#8220;Code Organization&#8221; rules (see above). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="317.109" y1="373.109" x0="72.0" x1="533.966" width="461.966" height="56.0" bbox="[72.0, 317.109, 533.966, 373.109]" index="4"><LTTextLineHorizontal y0="362.109" y1="373.109" x0="72.0" x1="525.405" width="453.405" height="11.0" bbox="[72.0, 362.109, 525.405, 373.109]" word_margin="0.1">Again, these are cases where proper code organization is encouraged by C++, which has the </LTTextLineHorizontal><LTTextLineHorizontal y0="347.109" y1="358.109" x0="72.0" x1="514.203" width="442.203" height="11.0" bbox="[72.0, 347.109, 514.203, 358.109]" word_margin="0.1">design goal of not punishing the use of proper abstractions with runtime costs. Avoiding the </LTTextLineHorizontal><LTTextLineHorizontal y0="332.109" y1="343.109" x0="72.0" x1="533.966" width="461.966" height="11.0" bbox="[72.0, 332.109, 533.966, 343.109]" word_margin="0.1">above, and in general caring about code organization, will make it easier both for the student to </LTTextLineHorizontal><LTTextLineHorizontal y0="317.109" y1="328.109" x0="72.0" x1="382.408" width="310.408" height="11.0" bbox="[72.0, 317.109, 382.408, 328.109]" word_margin="0.1">write and debug the projects, and for the instructors to help you. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="271.562" y1="291.562" x0="72.0" x1="196.495" width="124.495" height="20.0" bbox="[72.0, 271.562, 196.495, 291.562]" word_margin="0.1"><LTTextBoxHorizontal y0="271.562" y1="291.562" x0="72.0" x1="196.495" width="124.495" height="20.0" bbox="[72.0, 271.562, 196.495, 291.562]" index="5">Reading Input </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="203.359" y1="259.859" x0="72.0" x1="539.411" width="467.411" height="56.5" bbox="[72.0, 203.359, 539.411, 259.859]" index="6"><LTTextLineHorizontal y0="248.859" y1="259.859" x0="72.0" x1="526.414" width="454.414" height="11.0" bbox="[72.0, 248.859, 526.414, 259.859]" word_margin="0.1">Read input once, and be efficient about it. Do not use string streams for input! I see students </LTTextLineHorizontal><LTTextLineHorizontal y0="233.359" y1="244.859" x0="72.0" x1="539.411" width="467.411" height="11.5" bbox="[72.0, 233.359, 539.411, 244.859]" word_margin="0.1">every semester who read an entire line of input with getline(), then create a stringstream from </LTTextLineHorizontal><LTTextLineHorizontal y0="218.359" y1="229.859" x0="72.0" x1="534.159" width="462.159" height="11.5" bbox="[72.0, 218.359, 534.159, 229.859]" word_margin="0.1">that string, then read from the stringstream using &gt;&gt;. This wastes time by processing the same </LTTextLineHorizontal><LTTextLineHorizontal y0="203.359" y1="214.859" x0="72.0" x1="319.938" width="247.938" height="11.5" bbox="[72.0, 203.359, 319.938, 214.859]" word_margin="0.1">input three times! Just read using &gt;&gt; to begin with. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="128.359" y1="184.859" x0="72.0" x1="530.595" width="458.595" height="56.5" bbox="[72.0, 128.359, 530.595, 184.859]" index="7"><LTTextLineHorizontal y0="173.359" y1="184.859" x0="72.0" x1="525.816" width="453.816" height="11.5" bbox="[72.0, 173.359, 525.816, 184.859]" word_margin="0.1">When using &gt;&gt;, whatever variable follows it will be read if possible. For instance, if your input </LTTextLineHorizontal><LTTextLineHorizontal y0="158.359" y1="169.859" x0="72.0" x1="530.595" width="458.595" height="11.5" bbox="[72.0, 158.359, 530.595, 169.859]" word_margin="0.1">looks like &#8220;$123.45&#8221; (without the quote marks), use &gt;&gt; to read into a char(the dollar sign) then </LTTextLineHorizontal><LTTextLineHorizontal y0="143.359" y1="154.859" x0="72.0" x1="494.889" width="422.889" height="11.5" bbox="[72.0, 143.359, 494.889, 154.859]" word_margin="0.1">read into a double. Remember that &gt;&gt; skips white space (the space character, &lt;Tab&gt;, </LTTextLineHorizontal><LTTextLineHorizontal y0="128.359" y1="139.859" x0="72.0" x1="528.419" width="456.419" height="11.5" bbox="[72.0, 128.359, 528.419, 139.859]" word_margin="0.1">&lt;Enter&gt;, etc.). If you really want to read a character, even if it is white space, use cin.get(). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="83.359" y1="109.859" x0="72.0" x1="510.699" width="438.699" height="26.5" bbox="[72.0, 83.359, 510.699, 109.859]" index="8"><LTTextLineHorizontal y0="98.359" y1="109.859" x0="72.0" x1="509.872" width="437.872" height="11.5" bbox="[72.0, 98.359, 509.872, 109.859]" word_margin="0.1">When switching between &gt;&gt; and getline() be careful because &gt;&gt; does not consume the </LTTextLineHorizontal><LTTextLineHorizontal y0="83.359" y1="94.859" x0="72.0" x1="510.699" width="438.699" height="11.5" bbox="[72.0, 83.359, 510.699, 94.859]" word_margin="0.1">&lt;Enter&gt; that follows, and if you use getline() immediately afterward, your string variable </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="533.887" x1="540.004" width="6.118" height="11.0" bbox="[533.887, 53.859, 540.004, 64.859]" index="9">9 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="10" rotate="0" page_index="9" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="691.609" y1="718.109" x0="72.0" x1="539.323" width="467.323" height="26.5" bbox="[72.0, 691.609, 539.323, 718.109]" index="0"><LTTextLineHorizontal y0="706.609" y1="718.109" x0="72.0" x1="539.323" width="467.323" height="11.5" bbox="[72.0, 706.609, 539.323, 718.109]" word_margin="0.1">might be empty (it reads the \n and nothing else). If you know that you&#8217;re going to be at the end </LTTextLineHorizontal><LTTextLineHorizontal y0="691.609" y1="703.109" x0="72.0" x1="424.541" width="352.541" height="11.5" bbox="[72.0, 691.609, 424.541, 703.109]" word_margin="0.1">of a line, you can simply call getline() twice, and ignore the first result. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="646.562" y1="666.562" x0="72.0" x1="300.89" width="228.89" height="20.0" bbox="[72.0, 646.562, 300.89, 666.562]" word_margin="0.1"><LTTextBoxHorizontal y0="646.562" y1="666.562" x0="72.0" x1="300.89" width="228.89" height="20.0" bbox="[72.0, 646.562, 300.89, 666.562]" index="1">Exam Grade Optimization </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="488.859" y1="634.859" x0="72.0" x1="531.867" width="459.867" height="146.0" bbox="[72.0, 488.859, 531.867, 634.859]" index="2"><LTTextLineHorizontal y0="623.859" y1="634.859" x0="72.0" x1="518.691" width="446.691" height="11.0" bbox="[72.0, 623.859, 518.691, 634.859]" word_margin="0.1">Students often have trouble with coding questions on the 281 exams, partly because they&#8217;re </LTTextLineHorizontal><LTTextLineHorizontal y0="608.859" y1="619.859" x0="72.0" x1="528.448" width="456.448" height="11.0" bbox="[72.0, 608.859, 528.448, 619.859]" word_margin="0.1">used to typing, having an IDE or editor make suggestions about fixing mistakes, and using the </LTTextLineHorizontal><LTTextLineHorizontal y0="593.859" y1="604.859" x0="72.0" x1="531.867" width="459.867" height="11.0" bbox="[72.0, 593.859, 531.867, 604.859]" word_margin="0.1">compiler and test runs to get it correct. Writing code by hand is a skill, and you should practice </LTTextLineHorizontal><LTTextLineHorizontal y0="578.859" y1="589.859" x0="72.0" x1="526.597" width="454.597" height="11.0" bbox="[72.0, 578.859, 526.597, 589.859]" word_margin="0.1">it before the exam. Any time you have to write a function, you can treat it as an opportunity to </LTTextLineHorizontal><LTTextLineHorizontal y0="563.859" y1="574.859" x0="72.0" x1="523.516" width="451.516" height="11.0" bbox="[72.0, 563.859, 523.516, 574.859]" word_margin="0.1">practice. Always start by understanding the problem, writing down examples, diagrams, data </LTTextLineHorizontal><LTTextLineHorizontal y0="548.859" y1="559.859" x0="72.0" x1="526.36" width="454.36" height="11.0" bbox="[72.0, 548.859, 526.36, 559.859]" word_margin="0.1">structures, etc. This is good advice for labs, projects, or exam questions Then write the code </LTTextLineHorizontal><LTTextLineHorizontal y0="533.859" y1="544.859" x0="72.0" x1="498.927" width="426.927" height="11.0" bbox="[72.0, 533.859, 498.927, 544.859]" word_margin="0.1">out by hand, on paper. Type in the code and get it tested, revising it until you&#8217;re sure it&#8217;s </LTTextLineHorizontal><LTTextLineHorizontal y0="518.859" y1="529.859" x0="72.0" x1="508.874" width="436.874" height="11.0" bbox="[72.0, 518.859, 508.874, 529.859]" word_margin="0.1">working. Then go back and compare your original handwritten version to the final working </LTTextLineHorizontal><LTTextLineHorizontal y0="503.859" y1="514.859" x0="72.0" x1="519.85" width="447.85" height="11.0" bbox="[72.0, 503.859, 519.85, 514.859]" word_margin="0.1">version, and see what you did wrong: syntax errors, missing a base case, logic errors on the </LTTextLineHorizontal><LTTextLineHorizontal y0="488.859" y1="499.859" x0="72.0" x1="214.348" width="142.348" height="11.0" bbox="[72.0, 488.859, 214.348, 499.859]" word_margin="0.1">more complicated cases, etc. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="428.859" y1="469.859" x0="72.0" x1="529.258" width="457.258" height="41.0" bbox="[72.0, 428.859, 529.258, 469.859]" index="3"><LTTextLineHorizontal y0="458.859" y1="469.859" x0="72.0" x1="519.681" width="447.681" height="11.0" bbox="[72.0, 458.859, 519.681, 469.859]" word_margin="0.1">We&#8217;re encouraging this behavior by having you write code by hand in the labs this semester. </LTTextLineHorizontal><LTTextLineHorizontal y0="443.859" y1="454.859" x0="72.0" x1="529.258" width="457.258" height="11.0" bbox="[72.0, 443.859, 529.258, 454.859]" word_margin="0.1">Lab 01 starts out easy, Lab 02 will be a little harder, and we&#8217;ll increase the difficulty to give you </LTTextLineHorizontal><LTTextLineHorizontal y0="428.859" y1="439.859" x0="72.0" x1="194.199" width="122.199" height="11.0" bbox="[72.0, 428.859, 194.199, 439.859]" word_margin="0.1">more and better practice. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="398.859" y1="409.859" x0="72.0" x1="352.861" width="280.861" height="11.0" bbox="[72.0, 398.859, 352.861, 409.859]" word_margin="0.1"><LTTextBoxHorizontal y0="398.859" y1="409.859" x0="72.0" x1="352.861" width="280.861" height="11.0" bbox="[72.0, 398.859, 352.861, 409.859]" index="4">When you&#8217;re preparing to take an exam, here&#8217;s a few tips: </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="383.859" y1="394.859" x0="90.0" x1="521.848" width="431.848" height="11.0" bbox="[90.0, 383.859, 521.848, 394.859]" word_margin="0.1"><LTTextBoxHorizontal y0="383.859" y1="394.859" x0="90.0" x1="521.848" width="431.848" height="11.0" bbox="[90.0, 383.859, 521.848, 394.859]" index="5">1) Treat the entire semester as preparation for the exam. When you have to do multiple </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="338.859" y1="379.859" x0="108.0" x1="527.559" width="419.559" height="41.0" bbox="[108.0, 338.859, 527.559, 379.859]" index="6"><LTTextLineHorizontal y0="368.859" y1="379.859" x0="108.0" x1="527.559" width="419.559" height="11.0" bbox="[108.0, 368.859, 527.559, 379.859]" word_margin="0.1">choice questions for lab, do them first without your notes, but don&#8217;t submit them. Then </LTTextLineHorizontal><LTTextLineHorizontal y0="353.859" y1="364.859" x0="108.0" x1="524.096" width="416.096" height="11.0" bbox="[108.0, 353.859, 524.096, 364.859]" word_margin="0.1">go over them with your notes, and anything that you didn&#8217;t remember, write it down as </LTTextLineHorizontal><LTTextLineHorizontal y0="338.859" y1="349.859" x0="108.0" x1="421.478" width="313.478" height="11.0" bbox="[108.0, 338.859, 421.478, 349.859]" word_margin="0.1">possibly needed on your exam cheat-sheet (you get one in 281). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="278.859" y1="334.859" x0="90.0" x1="518.564" width="428.564" height="56.0" bbox="[90.0, 278.859, 518.564, 334.859]" index="7"><LTTextLineHorizontal y0="323.859" y1="334.859" x0="90.0" x1="515.531" width="425.531" height="11.0" bbox="[90.0, 323.859, 515.531, 334.859]" word_margin="0.1">2) After each lecture, think of one or two questions that you think we might ask. Which </LTTextLineHorizontal><LTTextLineHorizontal y0="308.859" y1="319.859" x0="108.0" x1="518.564" width="410.564" height="11.0" bbox="[108.0, 308.859, 518.564, 319.859]" word_margin="0.1">parts of the material seem the most important? What sort of question might we ask? </LTTextLineHorizontal><LTTextLineHorizontal y0="293.859" y1="304.859" x0="108.0" x1="512.062" width="404.062" height="11.0" bbox="[108.0, 293.859, 512.062, 304.859]" word_margin="0.1">Trade these questions with a few classmates, answer theirs and have them answer </LTTextLineHorizontal><LTTextLineHorizontal y0="278.859" y1="289.859" x0="108.0" x1="443.462" width="335.462" height="11.0" bbox="[108.0, 278.859, 443.462, 289.859]" word_margin="0.1">yours, and explain to each other why you thought that was important. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="263.859" y1="274.859" x0="90.0" x1="497.2" width="407.2" height="11.0" bbox="[90.0, 263.859, 497.2, 274.859]" word_margin="0.1"><LTTextBoxHorizontal y0="263.859" y1="274.859" x0="90.0" x1="497.2" width="407.2" height="11.0" bbox="[90.0, 263.859, 497.2, 274.859]" index="8">3) For your final studying push, start several days before the exam, rather than just </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="248.859" y1="259.859" x0="108.0" x1="238.754" width="130.754" height="11.0" bbox="[108.0, 248.859, 238.754, 259.859]" word_margin="0.1"><LTTextBoxHorizontal y0="248.859" y1="259.859" x0="108.0" x1="238.754" width="130.754" height="11.0" bbox="[108.0, 248.859, 238.754, 259.859]" index="9">cramming the night before. </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="233.859" y1="244.859" x0="90.0" x1="524.095" width="434.095" height="11.0" bbox="[90.0, 233.859, 524.095, 244.859]" word_margin="0.1"><LTTextBoxHorizontal y0="233.859" y1="244.859" x0="90.0" x1="524.095" width="434.095" height="11.0" bbox="[90.0, 233.859, 524.095, 244.859]" index="10">4) Take the practice exam as if it were the real exam, see how you need to manage your </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextLineHorizontal y0="218.859" y1="229.859" x0="108.0" x1="481.329" width="373.329" height="11.0" bbox="[108.0, 218.859, 481.329, 229.859]" word_margin="0.1"><LTTextBoxHorizontal y0="218.859" y1="229.859" x0="108.0" x1="481.329" width="373.329" height="11.0" bbox="[108.0, 218.859, 481.329, 229.859]" index="11">time, what you need to study more, what you forgot on your cheat-sheet, etc. </LTTextBoxHorizontal></LTTextLineHorizontal>
      <LTTextBoxHorizontal y0="188.859" y1="214.859" x0="90.0" x1="539.362" width="449.362" height="26.0" bbox="[90.0, 188.859, 539.362, 214.859]" index="12"><LTTextLineHorizontal y0="203.859" y1="214.859" x0="90.0" x1="277.286" width="187.286" height="11.0" bbox="[90.0, 203.859, 277.286, 214.859]" word_margin="0.1">5) Get enough sleep the night before. </LTTextLineHorizontal><LTTextLineHorizontal y0="188.859" y1="199.859" x0="90.0" x1="539.362" width="449.362" height="11.0" bbox="[90.0, 188.859, 539.362, 199.859]" word_margin="0.1">6) Find your best mood right before the exam -- do you want to be excited or calm? Do you </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="158.859" y1="184.859" x0="90.0" x1="470.132" width="380.132" height="26.0" bbox="[90.0, 158.859, 470.132, 184.859]" index="13"><LTTextLineHorizontal y0="173.859" y1="184.859" x0="108.0" x1="447.131" width="339.131" height="11.0" bbox="[108.0, 173.859, 447.131, 184.859]" word_margin="0.1">want to be outside in nature, or looking over your notes one last time? </LTTextLineHorizontal><LTTextLineHorizontal y0="158.859" y1="169.859" x0="90.0" x1="470.132" width="380.132" height="11.0" bbox="[90.0, 158.859, 470.132, 169.859]" word_margin="0.1">7) Look over all the problems on the exam, quickly, before doing any of them. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="128.859" y1="154.859" x0="126.0" x1="135.776" width="9.776" height="26.0" bbox="[126.0, 128.859, 135.776, 154.859]" index="14"><LTTextLineHorizontal y0="143.859" y1="154.859" x0="126.0" x1="135.776" width="9.776" height="11.0" bbox="[126.0, 143.859, 135.776, 154.859]" word_margin="0.1">a) </LTTextLineHorizontal><LTTextLineHorizontal y0="128.859" y1="139.859" x0="126.0" x1="135.776" width="9.776" height="11.0" bbox="[126.0, 128.859, 135.776, 139.859]" word_margin="0.1">b) </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextBoxHorizontal y0="113.859" y1="154.859" x0="144.0" x1="537.101" width="393.101" height="41.0" bbox="[144.0, 113.859, 537.101, 154.859]" index="15"><LTTextLineHorizontal y0="143.859" y1="154.859" x0="144.0" x1="457.247" width="313.247" height="11.0" bbox="[144.0, 143.859, 457.247, 154.859]" word_margin="0.1">If there&#8217;s something you just looked at 10 minutes ago, do it first. </LTTextLineHorizontal><LTTextLineHorizontal y0="128.859" y1="139.859" x0="144.0" x1="537.101" width="393.101" height="11.0" bbox="[144.0, 128.859, 537.101, 139.859]" word_margin="0.1">If there&#8217;s a problem that&#8217;s going to take 20% of the time for 5% of the points, do it </LTTextLineHorizontal><LTTextLineHorizontal y0="113.859" y1="124.859" x0="144.0" x1="164.162" width="20.162" height="11.0" bbox="[144.0, 113.859, 164.162, 124.859]" word_margin="0.1">last. </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="527.773" x1="540.004" width="12.231" height="11.0" bbox="[527.773, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="527.773" x1="540.004" width="12.231" height="11.0" bbox="[527.773, 53.859, 540.004, 64.859]" index="16">10 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
  <LTPage y0="0" y1="792" x0="0" x1="612" width="612" height="792" bbox="[0, 0, 612, 792]" pageid="11" rotate="0" page_index="10" page_label="">
    <LTRect y0="0.0" y1="792.0" x0="0.0" x1="612.0" width="612.0" height="792.0" bbox="[0.0, 0.0, 612.0, 792.0]" linewidth="0" pts="[[0.0, 792.0], [612.0, 792.0], [612.0, 0.0], [0.0, 0.0]]">
      <LTTextBoxHorizontal y0="662.109" y1="718.109" x0="72.0" x1="531.157" width="459.157" height="56.0" bbox="[72.0, 662.109, 531.157, 718.109]" index="0"><LTTextLineHorizontal y0="707.109" y1="718.109" x0="72.0" x1="525.974" width="453.974" height="11.0" bbox="[72.0, 707.109, 525.974, 718.109]" word_margin="0.1">I consider 7b to be a terribly written problem and try to avoid it. Some students have reported </LTTextLineHorizontal><LTTextLineHorizontal y0="692.109" y1="703.109" x0="72.0" x1="530.88" width="458.88" height="11.0" bbox="[72.0, 692.109, 530.88, 703.109]" word_margin="0.1">that they like to do the written coding problems first, because they&#8217;re better able to budget time </LTTextLineHorizontal><LTTextLineHorizontal y0="677.109" y1="688.109" x0="72.0" x1="531.157" width="459.157" height="11.0" bbox="[72.0, 677.109, 531.157, 688.109]" word_margin="0.1">(x multiple choice at y minutes each means I need x*y for the multiple choice, leaving z = 120 - </LTTextLineHorizontal><LTTextLineHorizontal y0="662.109" y1="673.109" x0="72.0" x1="241.839" width="169.839" height="11.0" bbox="[72.0, 662.109, 241.839, 673.109]" word_margin="0.1">x*y minutes for the written portion). </LTTextLineHorizontal></LTTextBoxHorizontal>
      <LTTextLineHorizontal y0="53.859" y1="64.859" x0="528.59" x1="540.004" width="11.415" height="11.0" bbox="[528.59, 53.859, 540.004, 64.859]" word_margin="0.1"><LTTextBoxHorizontal y0="53.859" y1="64.859" x0="528.59" x1="540.004" width="11.415" height="11.0" bbox="[528.59, 53.859, 540.004, 64.859]" index="1">11 </LTTextBoxHorizontal></LTTextLineHorizontal>
    </LTRect>
  </LTPage>
</pdfxml>
